<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用过pinia吗？有什么优点？</title>
      <link href="/2022/04/30/pinia/"/>
      <url>/2022/04/30/pinia/</url>
      
        <content type="html"><![CDATA[<p><strong>1. pinia是什么？</strong></p><p>pinia是一个用于vue的状态管理库，类似于vuex,是vue的另一种状态管理工具</p><blockquote><ul><li>在Vue3中，可以使用传统的Vuex来实现状态管理，也可以使用最新的pinia来实现状态管理，我们来看看官网如何解释pinia的：Pinia 是 Vue 的存储库，它允许您跨组件&#x2F;页面共享状态。</li><li>实际上，pinia就是Vuex的升级版，官网也说过，为了尊重原作者，所以取名pinia，而没有取名Vuex，所以大家可以直接将pinia比作为Vue3的Vuex</li></ul></blockquote><p><strong>与Vuex相比</strong></p><blockquote><p>与 Vuex 相比，Pinia 提供了一个更简单的 API，具有更少的规范，提供了 Composition-API 风格的 API，最重要的是，在与 TypeScript 一起使用时具有可靠的类型推断支持。</p></blockquote><ul><li><p>Vue2和Vue3都支持，这让我们同时使用Vue2和Vue3的小伙伴都能很快上手。</p></li><li><p>pinia中只有state、getter、action，抛弃了Vuex中的Mutation，Vuex中mutation一直都不太受小伙伴们的待见，pinia直接抛弃它了，这无疑减少了我们工作量。</p></li><li><p>pinia中action支持同步和异步，Vuex不支持</p></li><li><p>良好的Typescript支持，毕竟我们Vue3都推荐使用TS来编写，这个时候使用pinia就非常合适了</p></li><li><p>无需再创建各个模块嵌套了，Vuex中如果数据过多，我们通常分模块来进行管理，稍显麻烦，而pinia中每个store都是独立的，互相不影响。</p></li><li><p>体积非常小，只有1KB左右。</p></li><li><p>pinia支持插件来扩展自身功能。</p></li><li><p>支持服务端渲染</p></li></ul><p><strong>pinia官方文档</strong></p><p><a href="https://pinia.web3doc.top/">pinna文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack的打包原理</title>
      <link href="/2022/03/11/webpack-de-da-bao-yuan-li/"/>
      <url>/2022/03/11/webpack-de-da-bao-yuan-li/</url>
      
        <content type="html"><![CDATA[<p><strong>模块化机制</strong></p><p>webpack是把项目当作一个整体，通过给定的一个主文件，webpack将从这个主文件开始找到你项目当中的所有依赖的文件，使用loaders来处理它们，最后打包成一个或多个浏览器可识别的js文件</p><blockquote><p>webpack并不强制你使用某种模块化方案，而是通过兼容所有模块化方案让你无痛接入项目。有了webpack，你可以随意选择你喜欢的模块化方案，至于怎么处理模块之间的依赖关系及如何按需打包，webpack会帮你处理好的。</p></blockquote><p><strong>核心思想</strong></p><p>webpack打包原理是根据文件间的依赖关系对其进行静态分析，然后将这些模块按指定规则生成静态资源，当 webpack 处理程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，在解析文件递归的过程中根据文件类型和loader配置找出合适的loader用来对文件进行转换。然后将所有这些模块打包成一个或多个 bundle(捆绑包)。</p><p><strong>详细构建流程</strong></p><ol><li><p><code>初始化参数</code>：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。</p></li><li><p><code>开始编译</code>：用上一步得到的参数初始化 Compiler 对象,加载所有配置的插件,执行对象的 run 方法开始执行编译。<br>确定入口：根据配置中的 entry 找出所有的入口文件。</p></li><li><p><code>编译模块</code>：从入口文件出发,调用所有配置的 Loader 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</p></li><li><p><code>完成模块编译</code>：在经过第 4 步使用 Loader 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。</p></li><li><p><code>输出资源</code>：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 Chunk,再把每个 Chunk 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。</p></li><li><p><code>输出完成</code>：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 生命周期详细解析及新旧对比</title>
      <link href="/2021/12/09/react-sheng-ming-zhou-qi-xiang-xi-jie-xi-ji-xin-jiu-dui-bi/"/>
      <url>/2021/12/09/react-sheng-ming-zhou-qi-xiang-xi-jie-xi-ji-xin-jiu-dui-bi/</url>
      
        <content type="html"><![CDATA[<p>为了更好的支持异步渲染（Async Rendering），解决一些生命周期滥用可能导致的问题，React 从 V16.3 开始，</p><p>对生命周期进行渐进式调整，还对生命周期加入了错误处理。</p><p><strong>React 16.3 新增的生命周期方法</strong></p><p>React v16.0刚推出的时候，是增加了一个componentDidCatch生命周期函数，这只是一个增量式修改，完全不影响原有生命周期函数；但是，到了React v16.3，大改动来了，引入了两个新的生命周期函数：</p><blockquote><ol><li>static getDerivedStateFromProps()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidCatch()</li></ol></blockquote><p><strong>逐渐废弃的生命周期方法：</strong></p><blockquote><ol><li>componentWillMount()</li><li>componentWillReceiveProps()</li><li>componentWillUpdate()</li></ol></blockquote><h3 id="React-生命周期-旧"><a href="#React-生命周期-旧" class="headerlink" title="React 生命周期(旧)"></a>React 生命周期(旧)</h3><p><img src="/reactolds.png" alt="React 16.3旧生命周期"></p><p>react旧版生命周期包含三个过程：</p><p><strong>1、挂载过程</strong><br>constructor()<br>componentWillMount()<br>componentDidMount()</p><p><strong>2、更新过程</strong><br>componentWillReceiveProps(nextProps)<br>shouldComponentUpdate(nextProps,nextState)<br>componentWillUpdate (nextProps,nextState)<br>render()<br>componentDidUpdate(prevProps,prevState)</p><p><strong>3、卸载过程</strong><br>componentWillUnmount()</p><p><strong>其具体作用分别为：</strong><br>1、constructor()<br>完成了React数据的初始化。</p><p>2、componentWillMount()<br>组件已经完成初始化数据，但是还未渲染DOM时执行的逻辑，主要用于服务端渲染。</p><p>3、componentDidMount()<br>组件第一次渲染完成时执行的逻辑，此时DOM节点已经生成了。</p><p>4、componentWillReceiveProps(nextProps)<br>接收父组件新的props时，重新渲染组件执行的逻辑。</p><p>5、shouldComponentUpdate(nextProps, nextState)<br>在setState以后，state发生变化，组件会进入重新渲染的流程时执行的逻辑。在这个生命周期中return false可以阻止组件的更新，主要用于性能优化。</p><p>6、componentWillUpdate(nextProps, nextState)<br>shouldComponentUpdate返回true以后，组件进入重新渲染的流程时执行的逻辑。</p><p>7、render()<br>页面渲染执行的逻辑，render函数把jsx编译为函数并生成虚拟dom，然后通过其diff算法比较更新前后的新旧DOM树，并渲染更改后的节点。</p><p>8、componentDidUpdate(prevProps, prevState)<br>重新渲染后执行的逻辑。</p><p>9、componentWillUnmount()<br>组件的卸载前执行的逻辑，比如进行“清除组件中所有的setTimeout、setInterval等计时器”或“移除所有组件中的监听器removeEventListener”等操作。</p><h3 id="React生命周期（新）"><a href="#React生命周期（新）" class="headerlink" title="React生命周期（新）"></a>React生命周期（新）</h3><p><img src="/reactnews.png" alt="React 16.4后新的生命周期"></p><p>react16.4后使用了新的生命周期，使用getDerivedStateFromProps代替了旧的componentWillReceiveProps及componentWillMount。使用getSnapshotBeforeUpdate代替了旧的componentWillUpdate。</p><p><strong>使用getDerivedStateFromProps(nextProps, prevState)的原因：</strong></p><p>旧的React中componentWillReceiveProps方法是用来判断前后两个 props 是否相同，如果不同，则将新的 props 更新到相应的 state 上去。在这个过程中我们实际上是可以访问到当前props的，这样我们可能会对this.props做一些奇奇怪怪的操作，很可能会破坏 state 数据的单一数据源，导致组件状态变得不可预测。</p><p>而在 getDerivedStateFromProps 中禁止了组件去访问 this.props，强制让开发者去比较 nextProps 与 prevState 中的值，以确保当开发者用到 getDerivedStateFromProps 这个生命周期函数时，就是在根据当前的 props 来更新组件的 state，而不是去访问this.props并做其他一些让组件自身状态变得更加不可预测的事情。</p><p><strong>使用getSnapshotBeforeUpdate(prevProps, prevState)的原因：</strong></p><p>在 React 开启异步渲染模式后，在执行函数时读到的 DOM 元素状态并不总是渲染时相同，这就导致在 componentDidUpdate 中使用 componentWillUpdate 中读取到的 DOM 元素状态是不安全的，因为这时的值很有可能已经失效了。</p><p>而getSnapshotBeforeUpdate 会在 render 之后被调用，也就是说在 getSnapshotBeforeUpdate 中读取到的 DOM 元素状态是可以保证与componentDidUpdate 中一致的。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的生命周期</title>
      <link href="/2021/11/28/vue-sheng-ming-zhou-qi/"/>
      <url>/2021/11/28/vue-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、生命周期是什么"><a href="#一、生命周期是什么" class="headerlink" title="一、生命周期是什么"></a>一、生命周期是什么</h1><p>生命周期（Life Cycle）的概念应用很广泛，特别是在政治、经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”（Cradle-to-Grave）的整个过程在Vue中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程我们可以把组件比喻成工厂里面的一条流水线，每个工人（生命周期）站在各自的岗位，当任务流转到工人身边的时候，工人就开始工作PS：在Vue生命周期钩子会自动绑定 this 上下文到实例中，因此你可以访问数据，对 property 和方法进行运算这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () &#x3D;&gt; this.fetchTodos())</p><p>生命周期简单来说就是组件从创建之初到销毁之后一系列过程被称为生命周期</p><h1 id="二、生命周期有哪些"><a href="#二、生命周期有哪些" class="headerlink" title="二、生命周期有哪些"></a>二、生命周期有哪些</h1><p>Vue生命周期总共可以分为8个阶段：创建前后, 载入前后,更新前后,销毁前销毁后，以及一些特殊场景的生命周期</p><table><thead><tr><th align="left">生命周期</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">组件实例被创建之初</td></tr><tr><td align="left">created</td><td align="left">组件实例已经完全创建</td></tr><tr><td align="left">beforeMount</td><td align="left">组件挂载之前</td></tr><tr><td align="left">mounted</td><td align="left">组件挂载到实例上去之后</td></tr><tr><td align="left">beforeUpdate</td><td align="left">组件数据发生变化，更新之前</td></tr><tr><td align="left">updated</td><td align="left">组件数据更新之后</td></tr><tr><td align="left">beforeDestroy</td><td align="left">组件实例销毁之前</td></tr><tr><td align="left">destroyed</td><td align="left">组件实例销毁之后</td></tr><tr><td align="left">activated</td><td align="left">keep-alive 缓存的组件激活时</td></tr><tr><td align="left">deactivated</td><td align="left">keep-alive 缓存的组件停用时调用</td></tr><tr><td align="left">errorCaptured</td><td align="left">捕获一个来自子孙组件的错误时被调用</td></tr></tbody></table><h1 id="三、生命周期整体流程"><a href="#三、生命周期整体流程" class="headerlink" title="三、生命周期整体流程"></a>三、生命周期整体流程</h1><p><img src="/vuesm.png" alt="Vue生命周期流程图"></p><p><strong>具体分析</strong></p><p><code>beforeCreate -&gt; created</code></p><ul><li>初始化vue实例，进行数据观测</li></ul><p><code>created</code></p><ul><li><p>完成数据观测，属性与方法的运算，watch、event事件回调的配置</p></li><li><p>可调用methods中的方法，访问和修改data数据触发响应式渲染dom，可通过computed和watch完成数据计算</p></li><li><p>此时vm.$el 并没有被创建</p></li></ul><p><code>created -&gt; beforeMount</code></p><ul><li><p>判断是否存在el选项，若不存在则停止编译，直到调用vm.$mount(el)才会继续编译</p></li><li><p>优先级：render &gt; template &gt; outerHTML</p></li><li><p>vm.el获取到的是挂载DOM的</p></li></ul><p><code>beforeMount</code></p><ul><li><p>在此阶段可获取到vm.el</p></li><li><p>此阶段vm.el虽已完成DOM初始化，但并未挂载在el选项上</p></li></ul><p><code>beforeMount -&gt; mounted</code></p><ul><li>此阶段vm.el完成挂载，vm.$el生成的DOM替换了el选项所对应的DOM</li></ul><p><code>mounted</code></p><ul><li>vm.el已完成DOM的挂载与渲染，此刻打印vm.$el，发现之前的挂载点及内容已被替换成新的DOM</li></ul><p><code>beforeUpdate</code></p><ul><li><p>更新的数据必须是被渲染在模板上的（el、template、render之一）</p></li><li><p>此时view层还未更新</p></li><li><p>若在beforeUpdate中再次修改数据，不会再次触发更新方法</p></li></ul><p><code>updated</code></p><ul><li><p>完成view层的更新</p></li><li><p>若在updated中再次修改数据，会再次触发更新方法（beforeUpdate、updated）</p></li></ul><p><code>beforeDestroy</code></p><ul><li>实例被销毁前调用，此时实例属性与方法仍可访问</li></ul><p><code>destroyed</code></p><ul><li>完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</li><li>并不能清除DOM，仅仅销毁实例</li></ul><p><strong>使用场景分析</strong></p><table><thead><tr><th align="left">生命周期</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务</td></tr><tr><td align="left">created</td><td align="left">组件初始化完毕，各种数据可以使用，常用于异步数据获取</td></tr><tr><td align="left">beforeMount</td><td align="left">未执行渲染、更新，dom未创建</td></tr><tr><td align="left">mounted</td><td align="left">初始化结束，dom已创建，可用于获取访问数据和dom元素</td></tr><tr><td align="left">beforeUpdate</td><td align="left">更新前，可用于获取更新前各种状态</td></tr><tr><td align="left">updated</td><td align="left">更新后，所有状态已是最新</td></tr><tr><td align="left">beforeDestroy</td><td align="left">销毁前，可用于一些定时器或订阅的取消</td></tr><tr><td align="left">destroyed</td><td align="left">组件已销毁，作用同上</td></tr></tbody></table><h1 id="四、数据请求在created和mouted的区别"><a href="#四、数据请求在created和mouted的区别" class="headerlink" title="四、数据请求在created和mouted的区别"></a>四、数据请求在created和mouted的区别</h1><p>created是在组件实例一旦创建完成的时候立刻调用，这时候页面dom节点并未生成；mounted是在页面dom节点渲染完毕之后就立刻执行的。触发时机上created是比mounted要更早的，两者的相同点：都能拿到实例对象的属性和方法。 讨论这个问题本质就是触发的时机，放在mounted中的请求有可能导致页面闪动（因为此时页面dom结构已经生成），但如果在页面加载前完成请求，则不会出现此情况。建议对页面内容的改动放在created生命周期当中。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是版本控制？为什么要有版本控制？常用的版本控制工具有哪些？</title>
      <link href="/2021/08/19/shi-me-shi-ban-ben-kong-zhi-wei-shi-me-yao-you-ban-ben-kong-zhi-chang-yong-de-ban-ben-kong-zhi-gong-ju-you-na-xie/"/>
      <url>/2021/08/19/shi-me-shi-ban-ben-kong-zhi-wei-shi-me-yao-you-ban-ben-kong-zhi-chang-yong-de-ban-ben-kong-zhi-gong-ju-you-na-xie/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是版本控制？"><a href="#1-什么是版本控制？" class="headerlink" title="1. 什么是版本控制？"></a>1. 什么是版本控制？</h3><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。简单来说就是用于管理多人协同开发项目的技术。</p><h3 id="2-为什么要有版本控制？"><a href="#2-为什么要有版本控制？" class="headerlink" title="2. 为什么要有版本控制？"></a>2. 为什么要有版本控制？</h3><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具。（多人开发就必须要使用版本控制）</p><p>使用版本控制之后可以给你带来的一些便利：</p><blockquote><p>● 实现跨区域多人协同开发<br>● 追踪和记载一个或者多个文件的历史记录<br>● 组织和保护你的源代码和文档<br>● 统计工作量<br>● 并行开发、提高开发效率<br>● 跟踪记录整个软件的开发过程<br>● 减轻开发人员的负担，节省时间，同时降低人为错误</p></blockquote><h3 id="3-常见的版本控制工具"><a href="#3-常见的版本控制工具" class="headerlink" title="3. 常见的版本控制工具"></a>3. 常见的版本控制工具</h3><p>主流的版本控制器有如下这些：</p><blockquote><p>● Git<br>● SVN（Subversion）<br>● CVS（Concurrent Versions System）<br>● VSS（Micorosoft Visual SourceSafe）<br>● TFS（Team Foundation Server）<br>● Visual Studio Online</p></blockquote><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p><h3 id="4-版本控制分类"><a href="#4-版本控制分类" class="headerlink" title="4. 版本控制分类"></a>4. 版本控制分类</h3><p><strong>(1).本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><img src="/local11.png" alt="本地版本管理"></p><p><strong>(2).集中版本控制 SVN</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。</p><p><img src="/concentrate11.png" alt="集中式版本管理"></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS。</p><p><strong>(3).分布式版本控制 Git</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。</p><p><img src="/distributed11.png" alt="分布式版本控制"></p><p>分布式版本控制的优势就是每个人都拥有全部的代码，可以避免一些安全隐患。不会因为服务器损坏或者网络问题，造成不能工作的情况。</p><p><strong>(4).两大主流版本管理Git和SVN的主要区别</strong></p><p><code>SVN</code>是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p><code>Git</code>是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。<code>Git</code>可以直接看到更新了哪些代码和文件！</p><p><strong>总结：Git是目前世界上最先进的分布式版本控制系统。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序各个生命周期（应用生命周期，页面生命周期，组件生命周期）</title>
      <link href="/2021/06/09/xiao-cheng-xu-ge-ge-sheng-ming-zhou-qi-ying-yong-sheng-ming-zhou-qi-ye-mian-sheng-ming-zhou-qi-zu-jian-sheng-ming-zhou-qi/"/>
      <url>/2021/06/09/xiao-cheng-xu-ge-ge-sheng-ming-zhou-qi-ying-yong-sheng-ming-zhou-qi-ye-mian-sheng-ming-zhou-qi-zu-jian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序各个生命周期"><a href="#微信小程序各个生命周期" class="headerlink" title="微信小程序各个生命周期"></a>微信小程序各个生命周期</h1><ul><li>应用生命周期</li><li>页面生命周期</li><li>组件生命周期</li></ul><h3 id="1-应用生命周期"><a href="#1-应用生命周期" class="headerlink" title="1. 应用生命周期"></a>1. 应用生命周期</h3><h4 id="App-Object-object"><a href="#App-Object-object" class="headerlink" title="App(Object object)"></a>App(Object object)</h4><p>注册小程序。接受一个 <code>Object</code> 参数，其指定小程序的生命周期<code>回调</code>等。</p><p>App() 必须在 app.js 中调用，必须调用且只能调用一次。不然会出现无法预期的后果。</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">onLaunch(Object object)</td><td align="center">function</td><td align="center">小程序初始化完成时触发，全局只触发一次。参数也可以使用 wx.getLaunchOptionsSync 获取。</td></tr><tr><td align="center">onShow(Object object)</td><td align="center">function</td><td align="center">小程序启动，或从后台进入前台显示时触发。也可以使用 wx.onAppShow 绑定监听。</td></tr><tr><td align="center">onHide()</td><td align="center">function</td><td align="center">小程序从前台进入后台时触发。也可以使用 wx.onAppHide 绑定监听。</td></tr><tr><td align="center">onError(String error)</td><td align="center">function</td><td align="center">小程序发生脚本错误或 API 调用报错时触发。也可以使用 wx.onError 绑定监听。</td></tr><tr><td align="center">onPageNotFound(Object object)</td><td align="center">function</td><td align="center">小程序要打开的页面不存在时触发。也可以使用 wx.onPageNotFound 绑定监听。注意事项请参考 wx.onPageNotFound</td></tr><tr><td align="center">onUnhandledRejection(Object object)</td><td align="center">function</td><td align="center">小程序有未处理的 Promise 拒绝时触发。也可以使用 wx.onUnhandledRejection 绑定监听。注意事项请参考 wx.onUnhandledRejection。</td></tr><tr><td align="center">onThemeChange(Object object)</td><td align="center">function</td><td align="center">系统切换主题时触发。也可以使用 wx.onThemeChange 绑定监听。</td></tr></tbody></table><p><strong>示例代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">onLaunch</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'小程序初始化'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听小程序启动或切前台'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">onHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听小程序切后台'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'错误监听函数'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">onPageNotFound</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'小程序要打开的页面不存在时触发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wx<span class="token punctuation">.</span><span class="token function">redirectTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 重定向</span>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'pages/...'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 如果是 tabbar 页面，请使用 wx.switchTab</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-页面生命周期"><a href="#2-页面生命周期" class="headerlink" title="2. 页面生命周期"></a>2. 页面生命周期</h3><h4 id="Page-Object-object"><a href="#Page-Object-object" class="headerlink" title="Page(Object object)"></a>Page(Object object)</h4><p>注册小程序中的一个页面。接受一个 Object 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">data</td><td align="center">Object</td><td align="center">页面第一次渲染使用的初始数据页面加载时，data 将会以JSON字符串的形式由逻辑层传至渲染层，因此data中的数据必须是可以转成JSON的类型：字符串，数字，布尔值，对象，数组。</td></tr><tr><td align="center">options</td><td align="center">Object</td><td align="center">渲染层可以通过 WXML 对数据进行绑定。页面的组件选项，同 Component 构造器 中的 options ，需要基础库版本 2.10.1</td></tr><tr><td align="center">behaviors</td><td align="center">String Array</td><td align="center">类似于 mixins 和traits的组件间代码复用机制，参见 behaviors，需要基础库版本 2.9.2</td></tr><tr><td align="center">onLoad</td><td align="center">function</td><td align="center">页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。</td></tr><tr><td align="center">onShow</td><td align="center">function</td><td align="center">页面显示&#x2F;切入前台时触发。</td></tr><tr><td align="center">onReady</td><td align="center">function</td><td align="center">页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。</td></tr><tr><td align="center">onHide</td><td align="center">function</td><td align="center">页面隐藏&#x2F;切入后台时触发。 如 wx.navigateTo 或底部 tab 切换到其他页面，小程序切入后台等。</td></tr><tr><td align="center">onUnload</td><td align="center">function</td><td align="center">页面卸载时触发。如wx.redirectTo或wx.navigateBack到其他页面时。</td></tr><tr><td align="center">onPullDownRefresh</td><td align="center">function</td><td align="center">监听用户下拉动作</td></tr><tr><td align="center">onReachBottom</td><td align="center">function</td><td align="center">页面上拉触底事件的处理函数</td></tr><tr><td align="center">onShareAppMessage</td><td align="center">function</td><td align="center">用户点击右上角转发</td></tr><tr><td align="center">onShareTimeline</td><td align="center">function</td><td align="center">用户点击右上角转发到朋友圈</td></tr><tr><td align="center">onAddToFavorites</td><td align="center">function</td><td align="center">用户点击右上角收藏</td></tr><tr><td align="center">onPageScroll</td><td align="center">function</td><td align="center">页面滚动触发事件的处理函数</td></tr><tr><td align="center">onResize</td><td align="center">function</td><td align="center">页面尺寸改变时触发，详见 响应显示区域变化</td></tr><tr><td align="center">onTabItemTap</td><td align="center">function</td><td align="center">当前是 tab 页时，点击 tab 时触发</td></tr><tr><td align="center">onSaveExitState</td><td align="center">function</td><td align="center">页面销毁前保留状态回调</td></tr></tbody></table><p><strong>示例代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 页面的初始数据   */</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">/*页面生命周期*/</span> <span class="token function-variable function">onReady</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听页面初次渲染完成'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">onShow</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听页面显示'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">onHide</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听页面隐藏'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">onUnload</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'监听页面卸载'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 页面相关事件处理函数--监听用户下拉动作   */</span>  <span class="token function-variable function">onPullDownRefresh</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 页面上拉触底事件的处理函数   */</span>  <span class="token function-variable function">onReachBottom</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 用户点击右上角分享   */</span>  <span class="token function-variable function">onShareAppMessage</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-组件生命周期"><a href="#3-组件生命周期" class="headerlink" title="3. 组件生命周期"></a>3. 组件生命周期</h3><p>组件的生命周期，指的是组件自身的一些函数，这些函数在特殊的时间点或遇到一些特殊的框架事件时被自动触发。</p><p>其中，最重要的生命周期是 <code>created</code> <code>attached</code> <code>detached</code> ，包含一个组件实例生命流程的最主要时间点。</p><ul><li>created：组件实例刚刚被创建好时， <code>created</code> 生命周期被触发。此时，组件数据 <code>this.data</code> 就是在 <code>Component</code> 构造器中定义的数据 <code>data</code> 。 此时还不能调用 <code>setData</code> 。 通常情况下，这个生命周期只应该用于给组件 <code>this</code> 添加一些自定义属性字段。</li><li>attached： 在组件完全初始化完毕、进入页面节点树后， <code>attached</code> 生命周期被触发。此时， <code>this.data</code> 已被初始化为组件的当前值。这个生命周期很有用，绝大多数初始化工作可以在这个时机进行。</li><li>detached：在组件离开页面节点树后， <code>detached</code> 生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则 <code>detached</code> 会被触发。</li></ul><p>生命周期方法可以直接定义在 Component 构造器的第一级参数中。</p><p>自小程序基础库版本 2.2.3 起，组件的的生命周期也可以在 lifetimes 字段内进行声明（这是推荐的方式，其优先级最高）</p><table><thead><tr><th align="center">生命周期</th><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">created</td><td align="center">无</td><td align="center">在组件实例刚刚被创建时执行</td></tr><tr><td align="center">attached</td><td align="center">无</td><td align="center">在组件实例进入页面节点树时执行</td></tr><tr><td align="center">ready</td><td align="center">无</td><td align="center">在组件在视图层布局完成后执行</td></tr><tr><td align="center">moved</td><td align="center">无</td><td align="center">在组件实例被移动到节点树另一个位置时执行</td></tr><tr><td align="center">detached</td><td align="center">无</td><td align="center">在组件实例被从页面节点树移除时执行</td></tr><tr><td align="center">error</td><td align="center">Object Error</td><td align="center">每当组件方法抛出错误时执行</td></tr></tbody></table><p><strong>示例代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">lifetimes</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"在组件实例刚刚被创建时执行"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">attached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"在组件实例进入页面节点树时执行"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"在组件在视图层布局完成后执行"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">moved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"在组件实例被移动到节点树另一个位置时执行"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">detached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"在组件实例被从页面节点树移除时执行"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"每当组件方法抛出错误时执行"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件所在页面的生命周期"><a href="#组件所在页面的生命周期" class="headerlink" title="组件所在页面的生命周期"></a>组件所在页面的生命周期</h4><p>还有一些特殊的生命周期，它们并非与组件有很强的关联，但有时组件需要获知，以便组件内部处理。这样的生命周期称为“组件所在页面的生命周期”，在 <code>pageLifetimes</code> 定义段中定义。其中可用的生命周期包括：</p><table><thead><tr><th align="center">生命周期</th><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">show</td><td align="center">无</td><td align="center">组件所在的页面被展示时执行</td></tr><tr><td align="center">hide</td><td align="center">无</td><td align="center">组件所在的页面被隐藏时执行</td></tr><tr><td align="center">resize</td><td align="center">Object Size</td><td align="center">组件所在的页面尺寸变化时执行</td></tr></tbody></table><p><strong>示例代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">pageLifetimes</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 页面被展示</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">hide</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 页面被隐藏</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">resize</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 页面尺寸变化</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue异步组件</title>
      <link href="/2021/05/27/yi-bu-zu-jian/"/>
      <url>/2021/05/27/yi-bu-zu-jian/</url>
      
        <content type="html"><![CDATA[<p><strong>异步组件简介</strong></p><p>所谓的异步组件就是通过import或者require导入的vue组件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 例如：</span><span class="token keyword">const</span> componentA <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/componentA.vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者 </span><span class="token keyword">const</span> componentA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@/components/componentA.vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>异步组件的好处</strong></p><p>可以避免页面一加载时就去加载全部的组件，从而导致页面访问时间变长的问题。使用异步加载组件后，只有当需要某个组件时才会去加载需要的组件。</p><p><strong>异步加载组件案例</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncComponent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncComponent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">AsyncComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/asyncComponent.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack的理解、总结</title>
      <link href="/2021/05/09/webpack-de-li-jie-zong-jie/"/>
      <url>/2021/05/09/webpack-de-li-jie-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>WebPack 是一个模块打包工具，可以使用WebPack管理模块，并分析模块间的依赖关系，最终编绎输出模块为HTML、JavaScript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。</p><ul><li>对于不同类型的资源，webpack有对应的模块加载器loader，比如说，<br>  <code>CSS</code><br>  解析CSS的css-loader、style-loader，<br>  解析less的less-loader，sass的sass-loader,<br>  <code>JS</code><br>  解析将 TypeScript 转换成 JavaScript的ts-loader,<br>  解析ES6为ES5的babel-loader，<br>  解析JavaScript 代码规范的eslint-loader<br>  <code>Vue</code><br>  解析.vue文件的vue-loader、<br>  <code>静态资源：音视频、文件、json</code><br>  解析常用图片以及音视频资源的url-loader、<br>  解析文件的file-loader，<br>  解析 JSON 文件的json-loader</li></ul><hr><h3 id="webpack的基本功能（也就是各种loader的作用）"><a href="#webpack的基本功能（也就是各种loader的作用）" class="headerlink" title="webpack的基本功能（也就是各种loader的作用）"></a>webpack的基本功能（也就是各种loader的作用）</h3><ol><li><p><strong>代码转换</strong> ：TypeScript 编译成 JavaScript、ES6转ES5、SCSS 编译成 CSS 等等(各种loader)</p></li><li><p><strong>代码语法检测</strong> ：自动检测代码是否符合语法 （eslint-loader）</p></li><li><p><strong>代码分割</strong> ：打包代码时，可以将代码切割成不同的chunk(块)，实现按需加载，降低了初始化时间，提升了首屏渲染效率</p></li><li><p><strong>监测代码更新</strong> ，自动编译，刷新页面：监听本地源代码的变化，自动构建，刷新浏览器（自动刷新）</p></li><li><p><strong>自动发布</strong> ：更新完代码后，自动构建出线上发布代码并传输给发布系统(没用过)。</p></li><li><p><strong>文件压缩</strong> ：压缩 JavaScript、CSS、HTML 代码，缩小文件体积(比如说，打包后的js、css、html文件会去掉代码之间的空隔，紧凑显示)</p></li><li><p><strong>模块合并</strong> ：由于模块化的开发，一个页面可能会由多个模块组成，所以编译时需要把各个模块合并成一个文件（模块化开发引出的功能）</p></li></ol><hr><h3 id="webpack配置说明"><a href="#webpack配置说明" class="headerlink" title="webpack配置说明"></a>webpack配置说明</h3><h5 id="Webpack运行在node-js环境下，它的配置文件webpack-config-js遵循CommonJS规范，最终export出一个json对象。"><a href="#Webpack运行在node-js环境下，它的配置文件webpack-config-js遵循CommonJS规范，最终export出一个json对象。" class="headerlink" title="Webpack运行在node.js环境下，它的配置文件webpack.config.js遵循CommonJS规范，最终export出一个json对象。"></a>Webpack运行在node.js环境下，它的配置文件webpack.config.js遵循CommonJS规范，最终export出一个json对象。</h5><h5 id="webpack-config-js基础配置说明："><a href="#webpack-config-js基础配置说明：" class="headerlink" title="webpack.config.js基础配置说明："></a>webpack.config.js基础配置说明：</h5><blockquote><p>entry，指定了模块的入口，它让源文件加入构建流程中被webpack控制。<br>output，配置输出文件的存放位置、文件名、文件基础路径publicPath。<br>module，配置各种类型文件的解析规则,比如说.vue文件、.js文件。<br>rosolve，配置alias(别名)，或者定义寻找模块的规则。<br>plugins，配置扩展插件，扩展webpack的更多功能。<br>devServer，实现本地http服务等。<br>loader:模块加载器</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel-polyfill'</span><span class="token punctuation">,</span><span class="token string">'./src/main.js'</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsRoot<span class="token punctuation">,</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span>      <span class="token operator">?</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsPublicPath      <span class="token operator">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>assetsPublicPath  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//  当找不到模块时，尝试从后进行寻找</span>    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                    <span class="token comment">//别名</span>      <span class="token string-property property">'vue$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 排除模块，下面的模块不会编译到 webpack 打包后的文件中</span>    <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"vue"</span><span class="token operator">:</span>  <span class="token string">"Vue"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vuex"</span><span class="token operator">:</span> <span class="token string">"Vuex"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue-router"</span><span class="token operator">:</span> <span class="token string">"VueRouter"</span><span class="token punctuation">,</span>    <span class="token string-property property">"lodash"</span><span class="token operator">:</span> <span class="token string">"_"</span><span class="token punctuation">,</span>    <span class="token string-property property">"echarts"</span><span class="token operator">:</span> <span class="token string">"echarts"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 全局模块对象</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token string-property property">"Vue"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token string-property property">"Vuex"</span><span class="token operator">:</span> <span class="token string">"vuex"</span><span class="token punctuation">,</span>      <span class="token string-property property">"VueRouter"</span><span class="token operator">:</span> <span class="token string">"vue-router"</span><span class="token punctuation">,</span>      <span class="token string-property property">"_"</span><span class="token operator">:</span> <span class="token string">"lodash"</span><span class="token punctuation">,</span>      <span class="token string-property property">"echarts"</span><span class="token operator">:</span> <span class="token string">"echarts"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token operator">...</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>useEslint <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">createLintingRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>        <span class="token literal-property property">options</span><span class="token operator">:</span> vueLoaderConfig      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/webpack-dev-server/client'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">,</span><span class="token string">'scss'</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)(\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'img/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'media/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(woff2?|eot|ttf|otf)(\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'fonts/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// prevent webpack from injecting useless setImmediate polyfill because Vue</span>    <span class="token comment">// source contains it (although only uses it if it's native).</span>    <span class="token literal-property property">setImmediate</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment">// prevent webpack from injecting mocks to Node native modules</span>    <span class="token comment">// that does not make sense for the client</span>    <span class="token literal-property property">dgram</span><span class="token operator">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    <span class="token literal-property property">fs</span><span class="token operator">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    <span class="token literal-property property">net</span><span class="token operator">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    <span class="token literal-property property">tls</span><span class="token operator">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    <span class="token literal-property property">child_process</span><span class="token operator">:</span> <span class="token string">'empty'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="webpack打包流程"><a href="#webpack打包流程" class="headerlink" title="webpack打包流程"></a>webpack打包流程</h3><p>从 <strong>入口(entry)</strong> 开始，递归转换入口文件所依赖的module</p><p>每找到一个module，<strong>就根据对应的loader去转换这个module</strong></p><p>然后，<strong>再对当前module依赖的所有module进行转换</strong> ，如果子module还有依赖的话，再转换，直至没有依赖</p><p>其次，<strong>以入口文件(entry)为单位进行分组</strong> ，一个entry和其所有依赖的module被分到一个块(Chunk)。</p><p>最后，<strong>Webpack会把所有Chunk转换成文件输出</strong> ，在整个流程中Webpack会在恰当的时机执行plugin里定义的扩展插件。</p><hr><h3 id="webpack的工作原理"><a href="#webpack的工作原理" class="headerlink" title="webpack的工作原理"></a>webpack的工作原理</h3><p>简单的说就是分析代码，找到“require”、“exports”、“define”等关键词，并替换成对应模块的引用。</p><p>在一个配置文件中，指明对某些文件进行编译、压缩、组合等任务。把你的项目当成一个整体，通过一个给定的主文件 （index.js），webpack将从这个文件开始找到你的项目的所有的依赖文件，使用loaders处理他们，最后打包为一个浏览器可以识别的js文件。</p><hr><h3 id="有哪些常见的Plugin（插件）"><a href="#有哪些常见的Plugin（插件）" class="headerlink" title="有哪些常见的Plugin（插件）"></a>有哪些常见的Plugin（插件）</h3><ol><li>UglifyJsPlugin :压缩、混淆代码</li><li>CommonsChunkPlugin:代码分割</li><li>ProvidePlugin:自动加载模块</li><li>html-webpack-plugin:加载html,并且引入css&#x2F;js文件</li><li>extract-text-webpack-plugin; 抽离样式，生成css文件</li><li>optimize-css-assets-webpack-plugin:css去重</li><li>webpack-bundle-analyzer:代码分析</li><li>compression-webpack-plugin:使用gzip压缩js和css</li><li>happypack:使用多线程，加快代码构建</li><li>EnvironmentPlugin：定义局部的变量</li><li>mini-css-extract-plugin : 分离样式文件，CSS 提取为独立文件，支持按需加载;</li><li>hard-source-webpack-plugin : 利用缓存，提高打包与启动项目的速度；</li><li>uglifyjs-webpack-plugin：压缩代码，同时可以去掉代码中的debugger、console.log</li><li>clean-webpack-plugin: 目录清理</li><li>copy-webpack-plugin: 将单个文件或整个目录复制到打包后的目录。</li></ol><hr><h4 id="说一说Loader和Plugin的区别"><a href="#说一说Loader和Plugin的区别" class="headerlink" title="说一说Loader和Plugin的区别"></a>说一说Loader和Plugin的区别</h4><ol><li><p><code>功能不同</code>：<br> Loader 本质就是一个函数，对接收到的文件进行转换，比如将ts转换成js，将scss转换成css等。因为 webpack 只能理解 JavaScript 和 JSON 文件，对于其他资源例如 css，图片，或者其他的语法集是没有办法加载的。 这就需要对应的loader将资源转化,所以说loader主要就是用来转化文件的。</p><p> Plugin 是webpack的插件，目的在于解决loader无法实现的其他事,它直接作用于 webpack，扩展了它的功能。loader只是专注于转换文件这一个领域，而plugin的功能更加的丰富，而不仅局限于资源的加载。</p></li><li><p><code>运行时机不同</code><br> loader运行在打包文件之前，对文件进行预处理；</p><p> plugins 运行在loader结束后，webpack打包的整个过程中，它是基于事件机制，监听webpack打包过程中的某些节点，从而执行相应任务，进而改变输出。</p></li></ol><hr><h4 id="如何优化-Webpack-的构建速度"><a href="#如何优化-Webpack-的构建速度" class="headerlink" title="如何优化 Webpack 的构建速度"></a>如何优化 Webpack 的构建速度</h4><ol><li><p>使用高版本的 Webpack 和 Node.js</p></li><li><p><strong>压缩代码</strong><br> 1). 通过 uglifyjs-webpack-plugin， 压缩JS代码<br> 2). 通过 mini-css-extract-plugin ，分离 CSS 代码到单独文件，<br> 3). 通过 css-loader 的 minimize 选项开启 cssnano 压缩 CSS</p></li><li><p><strong>压缩图片</strong><br> 通过image-webpack-loader</p></li><li><p><strong>多线程&#x2F;多进程构建</strong><br> happyPack或thread-loader</p></li><li><p><strong>预编译资源模块：DLLPlugin</strong></p></li><li><p><strong>充分利用缓存提升二次构建速度</strong><br> 1). babel-loader 开启缓存<br> 2). terser-webpack-plugin 开启缓存<br> 3). 使用 hard-source-webpack-plugin</p></li><li><p><strong>缩小打包作用域</strong><br> 1). exclude&#x2F;include (确定 loader 规则范围)<br> 2). resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)<br> 3). resolve.mainFields 只采用 main 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)<br> 4). resolve.extensions 尽可能减少后缀尝试的可能性<br> 5). noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)<br> 6). ignorePlugin (完全排除模块)<br> 7). 合理使用alias</p></li><li><p><strong>公共资源提取</strong><br> CommonsChunkPlugin<br> html-webpack-externals-plugin，将基础包通过 CDN 引入，不打入 bundle 中。</p></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="（1）打包速度优化"><a href="#（1）打包速度优化" class="headerlink" title="（1）打包速度优化"></a>（1）打包速度优化</h5><blockquote><p>1、使用高版本的webpack和Node.js</p><p>2、多进程打包：happyPack或thread-loader</p><p>3、多进程并行压缩：parallel-uglify-plugin、uglifyjs-webpack-plugin 开启 parallel 参数、terser-webpack-plugin 开启 &gt;parallel 参数</p><p>4、预编译资源模块：DLLPlugin</p><p>5、缓存（babel-loader、terser-webpack-plugin、cache-loader）</p><p>6、exclude、include缩小构建目标，noParse忽略、IgnorePlugin</p><p>7、resolve配置减少文件搜索范围（alias、modules、extensions、mainFields）</p></blockquote><h5 id="2-打包体积优化"><a href="#2-打包体积优化" class="headerlink" title="(2) 打包体积优化"></a>(2) 打包体积优化</h5><blockquote><p>1、Tree-shaking擦除无用代码</p><p>2、Scope Hoisting优化代码</p><p>3、图片压缩（image-webpack-loader）</p><p>4、公共资源提取（CommonsChunkPlugin）</p><p>5、动态Polyfill</p><p>6、分包设置Externals，使用 html-webpack-externals- plugin，将 react、react-dom 基础包通过 cdn 引入，不打入 bundle 中</p><p>7、删除无用CSS代码（purgecss-webpack-plugin）</p><p>8、JS、CSS压缩（UglifyJsPlugin(3)、terser-webpack-plugin(4)、optimize-css-assets-webpack-plugin）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3中的setup执行时机</title>
      <link href="/2021/04/07/vue3-zhong-de-setup-zhi-xing-shi-ji/"/>
      <url>/2021/04/07/vue3-zhong-de-setup-zhi-xing-shi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>首先说一下执行时机</strong></p><p>1.时机位于beforeCreate和created之前</p><p>2.beforeCreate:表示组件刚刚被创建出来，组件的data和methods还没初始化好</p><p>3.created:表示组件刚刚被创建出来，并且组件的data和methods已经初始化好</p><p><code>注意点</code></p><ul><li><p>由于在执行setup函数时候，还没有执行created生命周期方法,所以在setup函数中，是无法使用data和methods</p></li><li><p>由于我们不能在setup函数中使用data和methods,所以VUE为了避免我们错误的使用,它直接将setup函数中this修改成了undefined</p></li><li><p>setup函数只能是同步的不能是异步的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者和发布订阅者模式的区别</title>
      <link href="/2021/01/19/guan-cha-zhe-he-fa-bu-ding-yue-zhe-mo-shi-de-qu-bie/"/>
      <url>/2021/01/19/guan-cha-zhe-he-fa-bu-ding-yue-zhe-mo-shi-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>从下图中可以看出，观察者模式中观察者和目标直接进行交互，而发布订阅模式中统一由调度中心进行处理，订阅者和发布者互不干扰。这样一方面实现了解耦，还有就是可以实现更细粒度的一些控制。比如发布者发布了很多消息，但是不想所有的订阅者都接收到，就可以在调度中心做一些处理，类似于权限控制之类的。还可以做一些节流操作。</p><p><img src="/wacth_fabudingyue.jpg" alt="两者构造图"></p><h4 id="概念上的区别"><a href="#概念上的区别" class="headerlink" title="概念上的区别"></a>概念上的区别</h4><p>1.观察者模式，目标和观察者是基类，目标提供维护观察者的一系列方法，观察者提供更新接口。具体观察者和具体目标继承各自的基类，然后具体观察者把自己注册到具体目标里，在具体目标发生变化时候，调度观察者的更新方法。</p><p>2.发布订阅，订阅者把自己想订阅的事件注册到调度中心，当该事件触发时候，发布者发布该事件到调度中心（顺带上下文），由调度中心统一调度订阅者注册到调度中心的处理代码。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>虽然两种模式都存在订阅者和发布者（具体观察者可认为是订阅者、具体目标可认为是发布者），但是观察者模式是由具体目标调度的，而发布&#x2F;订阅模式是统一由调度中心调的，所以观察者模式的订阅者与发布者之间是存在依赖的，而发布&#x2F;订阅模式则不会。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><strong>观察者模式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 观察者</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 观察者列表</span><span class="token keyword">class</span> <span class="token class-name">ObserverList</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observerList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observerList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">ob</span> <span class="token operator">=></span> ob <span class="token operator">!==</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observerList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 目标</span><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObserverList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> obCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> obCount<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>发布订阅模式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PubSub</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listeners <span class="token operator">||</span> <span class="token operator">!</span>listeners<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">!==</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listeners <span class="token operator">||</span> <span class="token operator">!</span>listeners<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> ob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PubSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ob<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ob<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件间的传值方式有哪些</title>
      <link href="/2020/07/22/vue-zu-jian-jian-de-tong-xin-fang-shi-you-na-xie/"/>
      <url>/2020/07/22/vue-zu-jian-jian-de-tong-xin-fang-shi-you-na-xie/</url>
      
        <content type="html"><![CDATA[<h3 id="组件间通信的分类"><a href="#组件间通信的分类" class="headerlink" title="组件间通信的分类"></a>组件间通信的分类</h3><p>组件间通信的分类可以分成以下</p><blockquote><ul><li>父子组件之间的通信</li><li>兄弟组件之间的通信</li><li>祖孙与后代组件之间的通信</li><li>非关系组件间之间的通信</li></ul></blockquote><h3 id="组件间通信的方案"><a href="#组件间通信的方案" class="headerlink" title="组件间通信的方案"></a>组件间通信的方案</h3><ol><li>通过 props 传递</li><li>通过 $emit 触发自定义事件</li><li>使用 ref</li><li>EventBus</li><li>$parent 或$root</li><li>attrs 与 listeners</li><li>Provide 与 Inject</li><li>Vuex</li></ol><p><strong>props传递数据</strong></p><ul><li><p>适用场景：父组件传递数据给子组件</p></li><li><p>子组件设置props属性，定义接收父组件传递过来的参数</p></li><li><p>父组件在使用子组件标签中通过字面量来传递值</p></li></ul><p><code>Children.vue</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 字符串形式  </span> <span class="token literal-property property">name</span><span class="token operator">:</span>String <span class="token comment">// 接收的类型参数  </span>    <span class="token comment">// 对象形式  </span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span> <span class="token comment">// 接收的类型为数值  </span>        <span class="token literal-property property">defaule</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>  <span class="token comment">// 默认值为18  </span>       <span class="token literal-property property">require</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">// age属性必须传递  </span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Father.vue组件</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Children</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span> <span class="token attr-name">age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>18</span> <span class="token punctuation">/></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>$emit 触发自定义事件</strong></p><ul><li><p>适用场景：子组件传递数据给父组件</p></li><li><p>子组件通过$emit触发自定义事件，$emit第二个参数为传递的数值</p></li><li><p>父组件绑定监听器获取到子组件传递过来的参数</p></li></ul><hr><p><strong>ref</strong></p><ul><li><p>父组件在使用子组件的时候设置ref</p></li><li><p>父组件通过设置子组件ref来获取数据</p></li></ul><hr><p><strong>父组件</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Children ref<span class="token operator">=</span><span class="token string">"foo"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>foo  <span class="token comment">// 获取子组件实例，通过子组件实例我们就能拿到对应的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p><strong>EventBus</strong></p><ul><li><p>使用场景：兄弟组件传值</p></li><li><p>创建一个中央事件总线EventBus</p></li><li><p>兄弟组件通过$emit触发自定义事件，$emit第二个参数为传递的数值</p></li><li><p>另一个兄弟组件通过$on监听自定义事件</p></li></ul><p><code>Bus.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个中央时间总线类  </span><span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// 存放事件的名字  </span>  <span class="token punctuation">&#125;</span>    <span class="token function">$on</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">$emit</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// main.js  </span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将$bus挂载到vue实例的原型上  </span><span class="token comment">// 另一种方式  </span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Vue已经实现了Bus的功能  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Children1.vue</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Children2.vue</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span>data<span class="token punctuation">.</span>aa <span class="token operator">=</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>$parent 或$root</strong></p><ul><li>通过共同祖辈$parent或者$root搭建通信桥连</li></ul><p>兄弟组件</p><p><code>this.$parent.on(&#39;add&#39;,this.add)</code></p><p>另一个兄弟组件</p><p><code>this.$parent.emit(&#39;add&#39;)</code></p><hr><p><strong>$attrs 与$listeners</strong></p><ul><li><p>适用场景：祖先传递数据给子孙</p></li><li><p>设置批量向下传属性$attrs和 $listeners</p></li><li><p>包含了父级作用域中不作为 prop 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。</p></li><li><p>可以通过 v-bind&#x3D;”$attrs” 传⼊内部组件</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// child：并未在props中声明foo  </span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$attrs<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token comment">// parent  </span><span class="token operator">&lt;</span>HelloWorld foo<span class="token operator">=</span><span class="token string">"foo"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// 给Grandson隔代传值，communication/index.vue  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child2</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lalala<span class="token punctuation">"</span></span> <span class="token attr-name">@some-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSomeEvent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child2</span><span class="token punctuation">></span></span>    // Child2做展开  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grandson</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$listeners<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grandson</span><span class="token punctuation">></span></span>    // Grandson使⽤  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$emit('some-event', 'msg from grandson')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  &#123;&#123;msg&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>provide 与 inject</strong></p><ul><li><p>在祖先组件定义provide属性，返回传递的值</p></li><li><p>在后代组件通过inject接收组件传递过来的值</p></li></ul><p><code>祖先组件</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">foo</span><span class="token operator">:</span><span class="token string">'foo'</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>后代组件</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">inject</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span> <span class="token comment">// 获取到祖先组件传递过来的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>vuex</strong></p><ul><li><p>适用场景: 复杂关系的组件数据传递</p></li><li><p>Vuex作用相当于一个用来存储共享变量的容器</p></li></ul><p>Vuex五大核心</p><blockquote><p>state用来存放共享变量的地方</p><p>getter，可以增加一个getter派生状态，(相当于store中的计算属性），用来获得共享变量的值</p><p>mutations用来存放修改state的方法。</p><p>actions也是用来存放修改state的方法，不过action是在mutations的基础上进行。常用来做一些异步操作</p></blockquote><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>父子关系的组件数据传递选择 props  与 $emit进行传递，也可选择ref</p></li><li><p>兄弟关系的组件数据传递可选择$bus，其次可以选择$parent进行传递</p></li><li><p>祖先与后代组件数据传递可选择attrs与listeners或者 Provide与 Inject</p></li><li><p>复杂关系的组件数据传递可以通过vuex存放共享的变量</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端权限控制</title>
      <link href="/2020/06/09/qian-duan-quan-xian-kong-zhi/"/>
      <url>/2020/06/09/qian-duan-quan-xian-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="前端权限控制思路"><a href="#前端权限控制思路" class="headerlink" title="前端权限控制思路"></a>前端权限控制思路</h3><h4 id="1-菜单的控制"><a href="#1-菜单的控制" class="headerlink" title="1.菜单的控制"></a>1.菜单的控制</h4><ul><li>在登录请求中，会得到权限数据。前端根据权限数据，展示对应的菜单，点击菜单，才能查看相关的界面</li></ul><p>我们点击登录按钮，登陆成功之后，后端除了用户的基本信息外，还有token数据，用于前端用户的状态保持，还会返回用户的权限数据 根据这个权限数据渲染不同的菜单。</p><h4 id="2-界面的控制-也可以叫路由控制"><a href="#2-界面的控制-也可以叫路由控制" class="headerlink" title="2.界面的控制 也可以叫路由控制"></a>2.界面的控制 也可以叫路由控制</h4><p>如果用户没有登录，手动在地址栏敲入管理界面的地址，则需要跳转到登录界面，​如果用户已经登录，可是手动敲入非权限内的地址，则需要跳转到404界面</p><p>正常的逻辑是通过登录界面，登录成功之后跳转到管理平台界面，但是如果用户直接敲入管理平台的地址，也是可以跳过登录的步骤，所以应该在某个时机判断用户是否登录</p><h4 id="3-按钮的控制"><a href="#3-按钮的控制" class="headerlink" title="3.按钮的控制"></a>3.按钮的控制</h4><p>在某个菜单的界面中，还得根据权限数据，展示出可进行操作的按钮，比如删除，修改，增加</p><p>虽然用户可以看到某些界面了，但是这个界面的一些按钮，该用户可能是没有权限的，因此，我们需要对组件中的一些按钮进行控制，用户不具备权限的按钮就隐藏或者禁用，而这块中，可以把该逻辑放到自定义指令中</p><h4 id="4-请求和响应控制"><a href="#4-请求和响应控制" class="headerlink" title="4.请求和响应控制"></a>4.请求和响应控制</h4><p>如果用户通过非常规操作，比如通过浏览器调试工具将某些禁用的按钮变成开启状态，此时发的请求，也应该被前端所拦截</p><p>除了登录请求都得要带上token，这样服务器才可以鉴别你的身份</p><p>如果发出了非权限内的请求，应该直接在前端访问内阻止，虽然这个请求发送到服务器也会被拒绝</p><p>得到了服务器返回的状态码401，代表token超时或者被篡改了，此时应该强制跳转到登录界面</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 权限控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件流是什么？</title>
      <link href="/2020/05/16/dom-shi-jian-liu/"/>
      <url>/2020/05/16/dom-shi-jian-liu/</url>
      
        <content type="html"><![CDATA[<p><strong>什么是事件流</strong></p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程就叫做DOM事件流。</p><blockquote><p>DOM事件流分为三个阶段：</p></blockquote><p><code>1.捕获阶段</code>：事件从window发出，自上而下向目标节点传播的阶段</p><p><code>2.目标阶段</code>：真正的目标阶段正在处理事件的阶段</p><p><code>3.冒泡阶段</code>：事件从目标节点自下而上向window传播的阶段</p><p>(注意⚠️：JS代码只能执行捕获或者冒泡其中一个阶段，要么是捕获要么是冒泡)</p><p><strong>冒泡和捕获的具体过程</strong></p><blockquote><p>冒泡指的是：当给某个目标元素绑定了事件之后，这个事件会依次在它的父级元素中被触发(当然前提是这个父级元素也有这个同名称的事件，比如子元素和父元素都绑定了click事件就触发父元素的click)。</p></blockquote><blockquote><p>捕获则是从上层向下层传递，与冒泡相反。</p></blockquote><p>举个例子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 会依次执行 button li ul --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'window'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'document'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>冒泡结果：button &gt; li &gt; ul &gt; document &gt; window</li><li>捕获结果：window &gt; document &gt; ul &gt; li &gt; button</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的插槽</title>
      <link href="/2020/04/05/vue-zhong-de-cha-cao/"/>
      <url>/2020/04/05/vue-zhong-de-cha-cao/</url>
      
        <content type="html"><![CDATA[<p><strong>什么是插槽</strong></p><p>插槽（slot）是 vue 为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽。</p><p><img src="/chacao.png" alt="插槽示意图"></p><p>可以把插槽认为是组件封装期间，为用户预留的内容的占位符.</p><p><strong>具名插槽</strong></p><p>如果在封装组件时需要预留多个插槽节点，则需要为每个 <slot> 插槽指定具体的name 名称。这种带有具体 名称的插槽叫做“具名插槽”。</p><p><strong>作用域插槽(既带数据，又带名字的插槽)</strong></p><ul><li><p>可以接受到插槽上定义的数据</p></li><li><p>如果插槽上没有定义数据，则接受到的是一个空对象</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的继承</title>
      <link href="/2020/03/23/js-zhong-de-ji-cheng/"/>
      <url>/2020/03/23/js-zhong-de-ji-cheng/</url>
      
        <content type="html"><![CDATA[<p><strong>继承的概念</strong></p><p>继承就是<code>子类</code>继承<code>父类</code>的属性和方法，目的可以让<code>子类</code>的实例能够使用<code>父类</code>的属性和方法，那在JS中类指的就是构造函数</p><p><strong>1.原型链继承</strong></p><p>原型链继承的核心</p><ul><li><p>子类构造函数.prototype&#x3D;父类的实例</p></li><li><p>子类构造函数.prototype.constructor&#x3D;子类构造函数</p></li></ul><p>1.原型链继承就是将父类的原型放到子类的原型链上，实例想要调用原型中的方法可以通过__proto__原型链的机制来完成</p><p>2.子类可以重写父类上的属性和方法</p><p>3.父类中私有的或者公有的属性和方法，最后都会变成子类公有的属性和方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父类构造函数</span><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">X</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">&#125;</span> <span class="token comment">// 父类的公有的方法</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getX</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">//子类</span><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">&#125;</span> <span class="token comment">//实现继承 把父类实例放到子类的原型上</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">'父类'</span><span class="token punctuation">)</span> <span class="token comment">//原型链</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">=</span><span class="token constant">B</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getY</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">//创建实例</span><span class="token keyword">let</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">'子类'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>2.call继承</strong></p><p>call继承又称（借用构造函数继承）</p><ul><li>在子类构造函数中把父类构造函数当作普通函数执行，并且通过call方法把父类构造函数中的this替换成子类的实例（this），这样相当于给子类实例上设置了私有的属性和方法。</li></ul><p>1.只能继承父类的私有的属性和方法（因为只是把父类构造当作普通函数执行了一次，跟父类的原型上的方法和属性没有任何关系）</p><p>2.父类的私有的属性和方法都会变成子类私有的属性和方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">seyHello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token function-variable function">getX</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">//子类</span><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span>x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getY</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.组合继承</strong></p><ul><li>结合原型链继承和借用构造函数继承组合起来的实现继承的一种方式</li></ul><p>（call继承）中</p><p>1.子类实例可以使用父类私有的属性和方法</p><p>2.父类私有的属性和方法都会变成子类实例私有的属性和方法</p><p>（原型链继承）</p><p>3.子类实例可以通过原型链访问和使用父类公有的属性和方法</p><p>4.子类的原型链上会存在一份多余的父类的私有属性和方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">seyHello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getX</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span>x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">=</span><span class="token constant">B</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getY</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> b <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.寄生组合继承</strong></p><ul><li>在原型链继承和借用构造函数继承基础上，同时自己创建一个对象，并且让这个对象的原型指向父类构造函数的prototype.实现寄生组合继承</li></ul><p>1.最完美的js继承解决方案</p><p>2.父类私有的属性和方法，成为子类实例私有的属性和方法</p><p>3.父类公有的属性和方法，成为子类实例公有的属性和方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">seyHello</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getX</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token comment">//子类</span><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span>x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">=</span><span class="token constant">B</span><span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getY</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> b <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> Object<span class="token punctuation">.</span><span class="token function-variable function">create</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">function</span> <span class="token function">NewObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">NewObj</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>arg<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NewObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.ES6中的Class类继承</strong></p><ul><li>ES6中新增了一个定义类的方法这样就不用我们手动的创建构造函数了</li></ul><p>ES6 class继承通过extends来实现继承</p><p>class 子类  extends父类</p><p>在constructor中要使用super（）</p><p>1.父类私有的属性和方法会变成子类私有的属性和方法</p><p>2.父类公有属性和方法会变成子类公有的属性和方法</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中对mixins的理解</title>
      <link href="/2020/02/15/vue-zhong-dui-mixins-de-li-jie/"/>
      <url>/2020/02/15/vue-zhong-dui-mixins-de-li-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><p>mixins是一种分发 Vue 组件中可复用功能的非常灵活的方式。混合对象可以包含任意组件选项。当组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p></li><li><p>而mixins引入组件之后，则是将组件内部的内容如data等方法、method等属性与父组件相应内容进行合并。相当于在引入后，父组件的各种属性方法都被扩充了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React和Vue的区别</title>
      <link href="/2020/01/01/react-he-vue-de-qu-bie/"/>
      <url>/2020/01/01/react-he-vue-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p><code>相同点</code>：<br>    1.数据驱动页面，提供响应式的试图组件<br>    2.都有virtual DOM,组件化的开发，通过props参数进行父子之间组件传递数据，都实现了webComponents规范<br>    3.数据流动单向，都支持服务器的渲染SSR</p><p><code>不同点</code>：<br>    1.数据绑定：Vue实现了双向的数据绑定，react数据流动是单向的<br>    2.数据渲染：大规模的数据渲染，react更快<br>    3.使用场景：React配合Redux架构适合大规模多人协作复杂项目，Vue适合小快的项目<br>    4.开发风格：react推荐做法jsx + inline style把html和css都写在js了</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRM系统</title>
      <link href="/2019/10/13/crm-xi-tong/"/>
      <url>/2019/10/13/crm-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是CRM系统？"><a href="#什么是CRM系统？" class="headerlink" title="什么是CRM系统？"></a>什么是CRM系统？</h3><blockquote><p>CRM客户关系管理系统（英文全称Customer Relationship Management），主要就是利用软件、硬件和网络技术，为企业建立一个客户信息收集、管理、分析、利用的信息系统。</p></blockquote><p>CRM系统主要是以客户为核心，企业和客户之间在品牌推广、销售产品或提供服务等场景下所产生的各种关系的处理过程，其最终目标就是吸引新客户关注并转化为企业付费用户、提高老客户留存率并帮助转介绍新用户，以此来增加企业的市场份额及利润，增强企业竞争力。</p><h3 id="CRM系统有什么作用？"><a href="#CRM系统有什么作用？" class="headerlink" title="CRM系统有什么作用？"></a>CRM系统有什么作用？</h3><p>客户关系管理系统(CRM)是利用信息科学技术,实现市场营销、销售、服务等活动自动化,是企业能更高效地为客户提供满意、周到的服务,以提高客户满意度、忠诚度为目的的一种管理经营方式。</p><h3 id="CRM系统的功能"><a href="#CRM系统的功能" class="headerlink" title="CRM系统的功能"></a>CRM系统的功能</h3><h4 id="1-筛选客户"><a href="#1-筛选客户" class="headerlink" title="1.筛选客户"></a>1.筛选客户</h4><p>一般而言，通过CRM系统可以将客户分为公海中的客户、私海中的客户。私海中的客户是业务员自己的客户资源，而公海中的客户，是可供所有销售人员进行抢单跟进的客户资源。而销售人员员也可以通过CRM客户关系管理系统进行客户筛选，将有意向的客户留在私海中，没意向或者意向不强烈的客户放到公海中，其他销售人员也可在公海中筛选客户。</p><p><img src="/kehu.png" alt="客户"></p><h4 id="2-发现价值客户"><a href="#2-发现价值客户" class="headerlink" title="2.发现价值客户"></a>2.发现价值客户</h4><p>大部分销售人员愿意将精力倾向于新客户的跟进，对于老客户的价值分析就不会很到位了。而使用CRM系统，通过客户细分推动并提升客户价值。</p><p><img src="/gen.png" alt="对新老客户添加跟进信息"></p><p><img src="/gen1.png" alt="跟进记录"></p><h4 id="3-防止抢单撞单"><a href="#3-防止抢单撞单" class="headerlink" title="3.防止抢单撞单"></a>3.防止抢单撞单</h4><p>内部斗争是每个企业都不愿意见到的，只有营造出公平合理的内部市场竞争自然环境，才可以避免内部的故意接单、撞单难题。无论是客户查重还是客户分配规则，CRM系统都能够高效执行，降低企业管理成本。</p><h4 id="4-打造自动化工作流"><a href="#4-打造自动化工作流" class="headerlink" title="4.打造自动化工作流"></a>4.打造自动化工作流</h4><p>在日常工作中，有许多任务可以自动执行，例如费用报销程序、订单流程、客户支持和客户跟进等，CRM系统都可以实现工作流自动化，不仅效率得到质的提升，并且为业务人员节省大量时间专注于自身工作。</p><p><img src="/order.png" alt="订单"></p><p><img src="/bao2.png" alt="报销审批"></p><p><img src="/bao1.png" alt="报销"></p><h4 id="5-提高市场营销效果"><a href="#5-提高市场营销效果" class="headerlink" title="5.提高市场营销效果"></a>5.提高市场营销效果</h4><p>企业可以通过CRM系统的营销模块，对市场营销活动加以计划、执行、监视、分析。从而为客户提供更快速周到的优质服务，吸引和保持更多的客户。</p><!-- ![促销活动,吸引客户](cuxiao.png) --><h4 id="6-数据可视化"><a href="#6-数据可视化" class="headerlink" title="6.数据可视化"></a>6.数据可视化</h4><p>通过CRM系统的数据分析功能，能够对销售相关的数据进行深入的分析，不论是线索、客户还是销售业绩，都可以通过报表和图表进行直观的呈现，企业经营状况一目了然，管理者可以通过这种可视化的数据快速发现问题和制定决策。</p><p><img src="/fenxi1.png" alt="新增客户数量"></p><p><img src="/fenxi.png" alt="数据分析"></p><!-- #### 7.为财务金融策略提供决策支持企业销售人员据此就可在与客户的前期洽谈、合同签订、贷款回收等过程中采取相应的、合理的对策。 -->]]></content>
      
      
      <categories>
          
          <category> 管理系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述flux思想</title>
      <link href="/2019/09/30/jian-shu-flux-si-xiang/"/>
      <url>/2019/09/30/jian-shu-flux-si-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是flux"><a href="#1-什么是flux" class="headerlink" title="1.什么是flux"></a>1.什么是flux</h3><p>Flux的提出主要是针对现有前端MVC框架的局限总结出来的一套基于dispatcher的前端应用架构模式。按照MVC的命名习惯，他应该叫ADSV（Action Dispatcher Store View）。</p><ul><li><p>Flux是Facebook官方提出的一套前端应用框架模式。它的核心概念就是单向数据流。</p></li><li><p>更像是一种软件开发模式，而不是具体的一个框架，所以基于Flux存在很多实现方式。其实，使用Flux框架开发程序不需要引入很多代码，关键是它内在的思想。</p></li><li><p>在Flux应用中，数据从action到dispatcher，再到store，最终到view的路线是不可逆的，各个角色之间不会像前段MVC模式那样存在交错的连线。</p></li></ul><blockquote><p>1.用户访问view<br>2.view发出用户的Action<br>3.dispatcher收到Action，要求Store进行响应的更新<br>4.Store更新后，发出一个”change”事件<br>5.view收到”change”事件后，更新页面</p></blockquote><p>Flux将一个应用分成四个部分；</p><p>1.view视图层<br>2.action(动作)；视图层发出的消息（比如mouseClick）<br>3.Dispatcher（派发器）：用来接收Actions，执行回调函数<br>4.Store（数据层）：用来存放应用的状态，一旦发生改变，就提醒Views更新页面</p><p>Flux的最大特点：就是数据的”单向流动”，数据总是”单项流动”，任何相邻的部分都不会发生数据的”双向流动”。</p><p><img src="/flux.png" alt="flux示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 架构模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 架构模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件和插件的区别</title>
      <link href="/2019/09/10/zu-jian-he-cha-jian/"/>
      <url>/2019/09/10/zu-jian-he-cha-jian/</url>
      
        <content type="html"><![CDATA[<p><strong>Vue组件（component）</strong></p><p>组件是用来构成应用的业务模块，把页面上的一些代码抽离出来，进行复用，通常在src目录下创建一个components文件夹来保存公共的组件，在Vue中每一个.vue文件都可以视为一个组件</p><p>组件的优势:</p><ul><li>降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求</li><li>调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件</li></ul><hr><p><strong>Vue插件(plugin)</strong></p><p>用来增强你的技术栈的功能模块，它的目标是Vue本身。插件是对Vue的功能的增强和补充，插件的功能范围没有严格的限制 插件通常用来为 Vue 添加全局功能。</p><ul><li>添加全局方法或者属性。如: vue-custom-element</li><li>添加全局资源：指令&#x2F;过滤器&#x2F;过渡等。如 vue-touch</li><li>通过全局混入来添加一些组件选项。如vue-router</li><li>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如vue-router</li></ul><hr><p><strong>两者的区别</strong><br>两者的区别主要表现在以下几个方面：</p><ul><li>编写形式</li><li>注册形式</li><li>使用场景</li></ul><p><code>编写组件</code><br>编写一个组件，可以有很多方式，我们最常见的就是vue单文件的这种格式，每一个.vue文件我们都可以看成是一个组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default&#123;     &#125;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>编写插件</code><br>vue插件的实现应该暴露一个 install 方法。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">MyPlugin<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1. 添加全局方法或 property</span>  Vue<span class="token punctuation">.</span><span class="token function-variable function">myGlobalMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 2. 添加全局资源</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 3. 注入组件选项</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 4. 添加实例方法</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">methodOptions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注册形式</strong></p><p><strong>组件注册</strong><br>vue组件注册主要分为全局注册与局部注册</p><p>全局注册通过Vue.component方法，第一个参数为组件的名称，第二个参数为传入的配置项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component-name'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>局部注册只需在用到的地方通过components属性注册一个组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> component1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span> <span class="token comment">// 定义一个组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>component1   <span class="token comment">// 局部注册</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>插件注册</strong></p><p>插件的注册通过Vue.use()的方式进行注册（安装），第一个参数为插件的名字，第二个参数是可选择的配置项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>插件名字<span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript -字符串常用方法</title>
      <link href="/2019/08/27/javascript-zi-fu-chuan-chang-yong-fang-fa/"/>
      <url>/2019/08/27/javascript-zi-fu-chuan-chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h3><ul><li>都是操作字符串的方法</li><li>通用语法：字符串.XXX()</li><li>注意：所有字符串方法都不会改变原始字符串，而是以<code>返回值</code>给出结果</li></ul><p><strong>1、 charAt()</strong></p><p>语法：字符串.charAt(索引)<br>返回值：该索引位置的字符<br>注意：当没有索引位置的时候，返回值是一个 空字符串(’’)</p><p><strong>2、charcodeAt()</strong><br>语法：字符串.charCodeAt(索引)<br>返回值：该索引位置的字符的编码(unicode)<br>注意：返回值是一个 Number 类型，如果没有该索引位置，返回NaN</p><p><strong>3、toUpperCase()</strong><br>语法：字符串.toUpperCase()<br>返回值：转换成大写后的字符串</p><p><strong>4、toLowerCase()</strong><br>语法：字符串.toLowerCase()<br>返回值：转换成小写后的字符串</p><p><strong>5、substr()</strong><br>语法：字符串.substr(开始索引，多少个)<br>返回值：截取出来的字符串</p><p><strong>6、substring()</strong><br>语法：字符串.substring(开始索引，结束索引)<br>特点：包含前面，不包含后面<br>返回值：截取出来的字符串</p><p><strong>7、slice()</strong><br>语法：字符串.slice(开始索引，结束索引)<br>特点1:包前不包后<br>特点2:可以写负整数<br>返回值：截取出来的字符串</p><p><strong>8、replace()</strong><br>语法：字符串.replace(换下字符，换上字符)<br>换上和换下字符串可以是一个字符，也可以是一个字符片段<br>返回值：替换好的字符串<br>注意：只能替换找到的第一个</p><p><strong>9、split()</strong><br>语法：字符串.split(分隔符号)<br>字符串.split(分隔符号，保留多少个)</p><p>作用：使用分隔符号把字符串拆分<br>返回值：是一个数组数据类型<br>数组内存储的就是拆分出来的每一项</p><p>注意：参数传递的是字符串内没有的内容，那么完整字符串作为一项<br>参数传递的是空字符串，那么一位一位拆分</p><p><strong>10、 concat()</strong><br>语法：字符串.concat(字符串2，字符串3，…)<br>返回值：拼接好的字符串</p><p><strong>11、indexOf()</strong><br>语法：字符串.indexOf(字符)<br>字符串.indexOf(字符，开始索引)<br>返回值：该字符字原始字符串内的索引位置, 如果你检索的是字符串片段, 那么是开头字符的索引位置</p><p><strong>12、lastIndexOf()</strong><br>语法：字符串.lastIndexOf(字符)<br>字符串.lastIndexOf(字符，开始索引)<br>返回值：从后向前检索，该字符字原始字符串内的索引位置, 如果你检索的是字符串片段, 那么是开头字符的索引位置</p><p><strong>13、trim()</strong><br>语法：字符串.trim()<br>返回值：去除原始字符串首尾空白,但是并不会去除中间得空白</p><p><strong>14、trimStart() &#x2F; trimLeft()</strong><br>语法：字符串.trimStart()<br>字符串.trim Start()<br>返回值：去除开始位置空白</p><p><strong>15、 trimEnd() &#x2F; trimRight()</strong><br>语法：trimEnd()<br>trimRight()<br>返回值：去除结束位置空白</p><p><strong>16、search()</strong><br>语法：字符串.search(字符串)<br>返回值：该字符在字符串中的索引位置，没有就是-1</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中数组新增方法</title>
      <link href="/2019/08/25/es6-shu-zu-xin-zeng-fang-fa/"/>
      <url>/2019/08/25/es6-shu-zu-xin-zeng-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Array-from"><a href="#1-Array-from" class="headerlink" title="1.Array.from"></a>1.Array.from</h4><p>Array.from()用于将一个类数组对象或者可遍历对象转换成一个真正的数组。<br>那么什么是类数组对象呢？所谓类数组对象，最基本的要求就是具有length属性的对象。</p><h4 id="2-Array-of"><a href="#2-Array-of" class="headerlink" title="2.Array.of"></a>2.Array.of</h4><p>Array.of( )用于将一组值转换成一个真正的数组。</p><h4 id="3-find方法"><a href="#3-find方法" class="headerlink" title="3.find方法"></a>3.find方法</h4><p>find方法用于查找符合条件的第一个数组成员，如果找到直接返回，没找到就返回undefined.</p><h4 id="4-findIndex方法"><a href="#4-findIndex方法" class="headerlink" title="4.findIndex方法"></a>4.findIndex方法</h4><p>findIndex方法用于查找符合条件的第一个数组成员对应的索引值，找的是位置，没找到就返回-1.</p><h4 id="5-fill方法"><a href="#5-fill方法" class="headerlink" title="5.fill方法"></a>5.fill方法</h4><p>fill方法用于填充数据，主要有三个参数，用法是arr.fill(填充的东西,从哪开始填充,不包含的结束位置)</p><h4 id="6-includes方法"><a href="#6-includes方法" class="headerlink" title="6.includes方法"></a>6.includes方法</h4><p>includes方法用来判断一个数组是否包含一个指定的值，包含就返回 true , 否则返回false。</p><h4 id="7-entries、keys和values"><a href="#7-entries、keys和values" class="headerlink" title="7.entries、keys和values"></a>7.entries、keys和values</h4><p>ES6提供三个新的方法— entries( )、keys( )和 values( )用于遍历数组。它们都返回一个遍历器,可以用for…of循环进行遍历,唯一的区别在于,keys( )是对键名的遍历, values( )是对键值的遍历,entries( )是对键值对的遍历。</p><h4 id="8-数组实例的-flat-，flatMap"><a href="#8-数组实例的-flat-，flatMap" class="headerlink" title="8.数组实例的 flat()，flatMap()"></a>8.数组实例的 flat()，flatMap()</h4><p>flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。传参数代表拉平几层默认是一层<br>flatMap()只能展开一层数组。方法对原数组的每个成员执行一个函数（相当于执行 Array.prototype.map()），然后对返回值组成的数组执行 flat()方法。该方法返回一个新数组，不改变原数组</p><h4 id="9-数组实例的copywithin"><a href="#9-数组实例的copywithin" class="headerlink" title="9.数组实例的copywithin()"></a>9.数组实例的copywithin()</h4><p>在当前数组内部将指定位置的成员复制到其他位置，然后返回当前数组，会改变原数组<br>接收三个参数：</p><p>1、target(必需) 从该位置开始替换数据</p><p>2、start(可选) 从该位置开始读取数据，默认为0，如果为负数，则表示到数</p><p>3、end(可选) 到该位置前停止读取数据，默认等于数组长度。如果是负数，表示到数</p><p>三个参数都应该是数字，如果不是，会自动转为数值</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游览器的本地存储</title>
      <link href="/2019/07/04/you-lan-qi-ben-di-cun-chu/"/>
      <url>/2019/07/04/you-lan-qi-ben-di-cun-chu/</url>
      
        <content type="html"><![CDATA[<p><strong>浏览器的几种本地存储</strong></p><p>不推荐使用 Cookie 作为客户端储存，这样做虽然可行，但是并不推荐，因为 Cookie 的设计目标并不是这个，它的容量很小（4KB），缺乏数据操作接口，而且会影响性能。客户端储存应该使用 Web storage API（就是 localStorage 和 sessionStore） 和 IndexedDB</p><p><strong>一、Cookie</strong></p><p>HTTP协议（<font color='#ff00'>应用层</font>超文本传输协议），用于从Web服务器传输超文本到本地浏览器，是一个无状态的协议，即不记录状态，<code>cookie 的存在就是为了解决HTTP不记录状态的情况</code>，是缓存在本地客户端的数据。向同一个域名下发送请求，都会携带相同的 Cookie，服务器拿到 Cookie 进行解析，便能拿到客户端的状态。Cookie 主要用来分辨两个请求是否来自同一个浏览器，以及用来保存一些状态信息</p><p><strong>1.cookie的属性</strong><br>Name、Size 故名思意<br>Value：保存用户登录状态，应该将该值加密，不能使用明文<br>Path：可以访问此 Cookie 的路径。比如 juejin.cn&#x2F;editor ，path是&#x2F;editor，只有&#x2F;editor这个路径下的才可以读取 Cookie<br>httpOnly：表示禁止通过 JS 访问 Cookie，减少 XSS（即代码注入式） 攻击。也就是 document.cookie 不能查看&#x2F;修改 cookie<br>Secure：只能在 https 请求中携带<br>SameSite：用来防止 CSRF 攻击和用户追踪，规定浏览器不能在跨域请求中携带 Cookie 减少 CSRF（有点像钓鱼网址，跳到另一个网站，携带了登录状态下的信息攻击，详细明看这里<br>👉<a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html">https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html</a><br>Domain：域名，跨域或者 Cookie 的白名单，允许一个子域获取或操作父域的 Cookie，实现单点登录的话会非常有用<br>Expires&#x2F;Max-size：指定时间或秒数的过期时间，没设置的话就和 Session 一样关闭浏览器就失效，Max-size 优先级高于 Expires</p><p><strong>2.cookie的缺点</strong></p><ul><li>容量缺陷。Cookie 的体积上限只有4KB，只能用来存储少量的信息。</li><li>性能缺陷。Cookie 紧跟域名，不管域名下面的某一个地址需不需要这个 Cookie ，请求都会携带上完整的 Cookie，这样随着数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。</li><li>安全缺陷。由于 Cookie 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie有效期内重新发送给服务器，这是相当危险的。另外，在 HttpOnly 为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。</li><li>跨域名不能共享 Cookie，同源策略：即协议、域名、端口号都相同</li></ul><p><strong>二、Web storage API</strong></p><p>Web Storage 又叫浏览器端数据储存机制</p><p>Storage 接口用于脚本在浏览器保存数据。两个对象部署了这个接口：window.sessionStorage和window.localStorage，两者有一个本质的区别，那就是前者只是会话级别的存储，并不是持久化存储。会话结束，也就是页面关闭，这部分sessionStorage就不复存在了，除了这个区别其他属性方法基本一致</p><p>属性1个和方法5个，属性只有 Storage.length （window.localStorage.length），方法有 Storage.setItem() 、Storage.getItem()、Storage.removeItem()、Storage.clear()、Storage.key()；结合使用Storage.length属性和Storage.key()方法，可以遍历所有的键。</p><p><strong>1. localStorage</strong><br>localStorage有一点跟Cookie一样，就是针对一个域名，即在同一个域名下，会存储相同的一段localStorage。<br>相比于cookie<br>容量。localStorage 的容量上限为5M，相比于Cookie的 4K 大大增加。当然这个 5M 是针对一个域名的，因此对于一个域名是持久存储的。<br>只存在客户端，默认不参与与服务端的通信。这样就很好地避免了 Cookie 带来的性能问题和安全问题。<br>接口封装。通过localStorage暴露在全局，并通过它的 setItem 和 getItem等方法进行操作，非常方便。<br>应用：利用localStorage的较大容量和持久特性，可以利用localStorage存储一些内容稳定的资源，比如官网的logo，存储Base64格式的图片资源，因此利用localStorage</p><p><strong>2. sessionStore</strong><br>特点：<br>容量。容量上限也为 5M。<br>只存在客户端，默认不参与与服务端的通信。<br>接口封装。除了sessionStorage名字有所变化，存储方式、操作方式均和localStorage一样。<br>应用：可以用它对表单信息进行维护，将表单信息存储在里面，可以保证页面即使刷新也不会让之前的表单信息丢失。可以用它存储本次浏览记录。如果关闭页面后不需要这些记录，用sessionStorage就再合适不过了。</p><p><strong>三、IndexedDB</strong><br>IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作，是运行在浏览器中的非关系型数据库<br>IndexedDB 是一个比较复杂的 API，操作看文档<br>参考看👉<a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html">http://www.ruanyifeng.com/blog/2018/07/indexeddb.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 游览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游览器的回流和重绘</title>
      <link href="/2019/06/23/hui-liu-chong-hui/"/>
      <url>/2019/06/23/hui-liu-chong-hui/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当元素的样式发生变化时，浏览器需要触发更新，重新绘制元素。这个过程中，有两种类型的操作，即重绘与回流。</p></blockquote><blockquote><p>重绘(repaint): 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此 损耗较少<br>回流(reflow): 当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。会触发回流的操作:</p></blockquote><ul><li><p>页面初次渲染</p></li><li><p>浏览器窗口大小改变</p></li><li><p>元素尺寸、位置、内容发生改变</p></li><li><p>元素字体大小变化</p></li><li><p>添加或者删除可见的 dom 元素</p></li><li><p>激活 CSS 伪类（例如：:hover）</p></li><li><p>查询某些属性或调用某些方法</p><ul><li>clientWidth、clientHeight、clientTop、clientLeft</li><li>offsetWidth、offsetHeight、offsetTop、offsetLeft</li><li>scrollWidth、scrollHeight、scrollTop、scrollLeft</li><li>getComputedStyle()</li><li>getBoundingClientRect()</li><li>scrollTo()</li></ul></li><li><p>回流必定触发重绘，重绘不一定触发回流。重绘的开销较小，回流的代价较高。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 游览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new关键字</title>
      <link href="/2019/06/03/new-guan-jian-zi/"/>
      <url>/2019/06/03/new-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h4 id="常见考点"><a href="#常见考点" class="headerlink" title="常见考点"></a>常见考点</h4><ul><li>new 做了那些事？</li><li>new 返回不同的类型时会有什么表现？</li><li>手写 new 的实现过程</li></ul><blockquote><p>new 关键词的主要作用就是执行一个构造函数、返回一个实例对象，在 new 的过程中，根据构造函数的情况，来确定是否可以接受参数的传递。下面我们通过一段代码来看一个简单的 new 的例子</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jack'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment">// Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码比较容易理解，从输出结果可以看出，p 是一个通过 person 这个构造函数生成的一个实例对象，这个应该很容易理解。</p><blockquote><p>new 操作符可以帮助我们构建出一个实例，并且绑定上 this，内部执行步骤可大概分为以下几步：</p></blockquote><p>1.创建一个新对象<br>2.对象连接到构造函数原型上，并绑定 this（this 指向新对象）<br>3.执行构造函数代码（为这个新对象添加属性）<br>4.返回新对象</p><blockquote><p>总结：new 关键词执行之后总是会返回一个对象，要么是实例对象，要么是 return 语句指定的对象</p></blockquote><p><img src="/new.png" alt="new关键字"></p><h4 id="手工实现New的过程"><a href="#手工实现New的过程" class="headerlink" title="手工实现New的过程"></a>手工实现New的过程</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token string">'fn must be a function'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// 1、用new Object() 的方式新建了一个对象obj</span>  <span class="token comment">// var obj = new Object()</span><span class="token comment">// 2、给该对象的__proto__赋值为fn.prototype，即设置原型链</span>  <span class="token comment">// obj.__proto__ = fn.prototype</span>  <span class="token comment">// 1、2步骤合并</span>  <span class="token comment">// 创建一个空对象，且这个空对象继承构造函数的 prototype 属性</span>  <span class="token comment">// 即实现 obj.__proto__ === constructor.prototype</span>  <span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3、执行fn，并将obj作为内部this。使用 apply，改变构造函数 this 的指向到新建的对象，这样 obj 就可以访问到构造函数中的属性</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4、如果fn有返回值，则将其作为new操作返回内容，否则返回obj</span><span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 Object.create 将 obj 的proto指向为构造函数的原型；</li><li>使用 apply 方法，将构造函数内的 this 指向为 obj；</li><li>在 create 返回时，使用三目运算符决定返回结果。</li><li>我们知道，构造函数如果有显式返回值，且返回值为对象类型，那么构造函数返回结果不再是目标实例</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'lucas'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token comment">// &#123;1: 1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用create代替new</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用内置函数new</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// 使用手写的new，即create</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>new 被调用后大致做了哪几件事情</strong></p><ul><li>让实例可以访问到私有属性；</li><li>让实例可以访问构造函数原型（<code>constructor.prototype</code>）所在原型链上的属性；</li><li>构造函数返回的最后结果是引用数据类型。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么样的代码算是好代码？？</title>
      <link href="/2019/05/17/code/"/>
      <url>/2019/05/17/code/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>首先整体代码逻辑是清晰的 bug难以隐藏 方便调试</li><li>依赖较少，<code>易于维护</code></li><li>最好是<code>复用性强</code>的 避免重复造轮子</li><li><code>可读性高</code>的 可以让其他同事能轻易看懂的</li><li>文档和注释 方便其他人能更好的理解代码</li><li>对于处理异常的处理</li><li>模块划分 对于一些逻辑比较复杂的代码通过合理的模块划分能够把复杂的功能拆分为更易于维护的更小的功能点</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>null是对象吗？为什么？</title>
      <link href="/2019/04/27/null1/"/>
      <url>/2019/04/27/null1/</url>
      
        <content type="html"><![CDATA[<h5 id="结论-null不是对象。"><a href="#结论-null不是对象。" class="headerlink" title="结论: null不是对象。"></a>结论: null不是对象。</h5><blockquote><p>解释: 虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object 。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝浅拷贝的区别？如何实现一个深拷贝？</title>
      <link href="/2019/04/15/kao-bei-qian-kao-bei-de-qu-bie-ru-he-shi-xian-yi-ge-shen-kao-bei/"/>
      <url>/2019/04/15/kao-bei-qian-kao-bei-de-qu-bie-ru-he-shi-xian-yi-ge-shen-kao-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据类型存储"><a href="#一、数据类型存储" class="headerlink" title="一、数据类型存储"></a>一、数据类型存储</h2><p>在<code>JavaScript</code>中存在两大数据类型：</p><ul><li>基本类型</li><li>引用类型</li></ul><p>基本类型数据保存在在栈内存中</p><p>引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中</p><h2 id="二、浅拷贝"><a href="#二、浅拷贝" class="headerlink" title="二、浅拷贝"></a>二、浅拷贝</h2><p>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</p><p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</p><p>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p><p>下面简单实现一个浅拷贝</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JavaScript中，存在浅拷贝的现象有：</p><ul><li>Object.assign</li><li>Array.prototype.slice(), Array.prototype.concat()</li><li>使用拓展运算符实现的复制</li></ul><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token literal-property property">nature</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'smart'</span><span class="token punctuation">,</span> <span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">names</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name1</span><span class="token operator">:</span> <span class="token string">'fx'</span><span class="token punctuation">,</span>        <span class="token literal-property property">name2</span><span class="token operator">:</span> <span class="token string">'xka'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">love</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fx is a great girl'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> fxObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>fxArr<span class="token punctuation">]</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、深拷贝"><a href="#三、深拷贝" class="headerlink" title="三、深拷贝"></a>三、深拷贝</h2><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p><p>常见的深拷贝方式有：</p><ul><li><p>Lodash工具库中的_.cloneDeep()</p></li><li><p>jQuery.extend()</p></li><li><p>JSON.stringify()</p></li><li><p>手写循环递归</p></li></ul><h3 id="cloneDeep"><a href="#cloneDeep" class="headerlink" title="_.cloneDeep()"></a>_.cloneDeep()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jQuery-extend"><a href="#jQuery-extend" class="headerlink" title="jQuery.extend()"></a>jQuery.extend()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj2<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这种方式存在弊端，会忽略<code>undefined</code>、<code>symbol</code>和函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>    <span class="token literal-property property">name1</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>    <span class="token function-variable function">name3</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">name4</span><span class="token operator">:</span>  <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;name: "A"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环递归"><a href="#循环递归" class="headerlink" title="循环递归"></a>循环递归</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token comment">// 如果是null或者undefined我就不进行拷贝操作</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token comment">// 是对象的话就要进行深拷贝</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span>  hash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 实现一个递归拷贝</span>      cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、区别"><a href="#四、区别" class="headerlink" title="四、区别"></a>四、区别</h2><blockquote><p>浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象</p></blockquote><blockquote><p>但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象</p></blockquote><p><strong>小结</strong><br>前提为拷贝类型为引用类型的情况下：</p><p>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</p><p>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React的diff算法</title>
      <link href="/2019/03/29/react-de-diff-suan-fa/"/>
      <url>/2019/03/29/react-de-diff-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>diff的概念</strong></p><p>diff算法, 是 Virtual DOM 产生的一个概念， 用来计算出Virtual DOM中真正变化的部分，并只针对该部分进行原生DOM操作，而非重新渲染整个页面，从而提高了页面渲染效率。</p><p><strong>diff算法出现的背景</strong></p><blockquote><p>调用 React 的 render() 方法，会创建一棵由 React 元素组成的树。在下一次 state 或 props 更新时，相同的 render() 方法会返回一棵不同的树。React 需要基于这两棵树之间的差别来更新 UI。</p><p>这个算法问题有一些通用的解决方案，即生成将一棵树转换成另一棵树的最小操作数。 然而，即使在最前沿的算法中，该算法的复杂程度为 O(n 3 )，其中 n 是树中元素的数量。</p><p>如果在 React 中使用了该算法，那么展示 1000 个元素所需要执行的计算量将在十亿的量级范围。这个开销实在是太过高昂。<br>为了降低算法复杂度，react通过一些限制策略，提出了一套O(n) 的启发式算法。</p></blockquote><p>简单的来讲, react 它只比较同一层, 一旦不一样, 就删除. 这样子每一个节点只会比较一次, 所以算法就变成了 O(n).</p><p>对于同一层的一组子节点. 他们有可能顺序发生变化, 但是内容没有变化. react 根据 key 值来进行区分, 一旦 key 值相同, 就直接返回之前的组件, 不重新创建.</p><p>这也是为什么渲染数组的时候, 没有加 key 值或者出现重复key值会出现一些奇奇怪怪的 bug . </p><p><strong>Diff算法的限制策略</strong></p><ul><li>只对同级元素进行Diff。如果一个DOM节点在前后两次更新中跨越了层级，那么React不会尝试复用他。</li><li>两个不同类型的元素会产生出不同的树。如果元素由div变为p，React会销毁div及其子孙节点，并新建p及其子孙节点。</li><li>开发者可以通过 key属性 来暗示哪些子元素在不同的渲染下能保持稳定（即是否可稳定复用）</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件化和模块化的区别</title>
      <link href="/2019/03/06/zu-jian-hua-he-mo-kuai-hua/"/>
      <url>/2019/03/06/zu-jian-hua-he-mo-kuai-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>组件化：层层嵌套，基于UI层面的封装。组件最为重要的就是重用（复用），位于框架最底层，其他功能都依赖于组件，可供不同功能使用，独立性强 ，就像一个小小的单位，多个组件可以组合成组件库，方便调用和复用，组件间也可以嵌套，小组件组合成大组件。<br>不同于组件化，模块化是对文件、对代码和资源拆分，而组件化则是对 UI 层面的拆分。</p><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>模块化：基于代码层面的封装，分属同一功能&#x2F;业务的代码进行分装成独立的模块，可以独立的运行，以页面、功能或其他不同粒度划分程度不同的模块</p><p>模块化是指将一个文件拆分成多个相互依赖的文件，最后进行统一的打包和加载，这样能够很好的保证高效的多人协作<br>其中包含</p><blockquote><p>JS 模块化：CommonJS、AMD、CMD 以及 ES6 Module。<br>CSS 模块化：Sass、Less、Stylus、BEM、CSS Modules 等。其中预处理器和 BEM 都会有的一个问题就是样式覆盖。而 CSS Modules 则是通过 JS 来管理依赖，最大化的结合了 JS 模块化和 CSS 生态，比如 Vue 中的 style scoped。<br>资源模块化：任何资源都能以模块的形式进行加载，目前大部分项目中的文件、CSS、图片等都能直接通过 JS 做统一的依赖关系处理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>null和undefined区别</title>
      <link href="/2019/02/17/null-undefinedbie/"/>
      <url>/2019/02/17/null-undefinedbie/</url>
      
        <content type="html"><![CDATA[<ul><li><p>undefined 表示不存在这个值。</p></li><li><p>undefined :是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined</p><blockquote><p><font color='#EF7060'>调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>  对象没有赋值的属性，该属性的值为undefined。<br>  函数没有返回值时，默认返回undefined</font></p></blockquote></li><li><p>例如变量被声明了，但没有赋值时，就等于undefined</p></li><li><p>null 表示一个对象被定义了，值为“空值”</p></li><li><p>null : 是一个对象(空对象, 没有任何属性和方法)</p></li><li><p>例如作为函数的参数，表示该函数的参数不是对象；</p></li><li><p>在验证null时，一定要使用　&#x3D;&#x3D;&#x3D; ，因为 &#x3D;&#x3D;无法分别null 和　undefined</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPA单页面的理解</title>
      <link href="/2019/02/15/ni-dui-spa-dan-ye-mian-de-li-jie-ta-de-you-que-dian-fen-bie-shi-shi-me-ru-he-shi-xian-spa-ying-yong-ni/"/>
      <url>/2019/02/15/ni-dui-spa-dan-ye-mian-de-li-jie-ta-de-you-que-dian-fen-bie-shi-shi-me-ru-he-shi-xian-spa-ying-yong-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是SPA"><a href="#一、什么是SPA" class="headerlink" title="一、什么是SPA"></a>一、什么是SPA</h1><ul><li>SPA（single-page-application）就是单页应用。<blockquote><p>SPA（single-page application），翻译过来就是单页应用SPA是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（HTML、JavaScript和CSS）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面页面在任何时间点都不会重新加载，也不会将控制转移到其他页面举个例子来讲就是一个杯子，早上装的牛奶，中午装的是开水，晚上装的是茶，我们发现，变的始终是杯子里的内容，而杯子始终是那个杯子</p></blockquote></li></ul><p>1.SPA将所有的活动局限于一个Web页面中，仅在该Web页面初始化时加载相应的HTML、JavaScript、CSS</p><p>2.一旦页面加载完成，SPA不会因为用户的操作而进行页面的重新加载或跳转，取而代之的是用路由机制实现htm内容的变换，从而实现UI与用户的交互</p><p>我们熟知的JS框架如<code>react</code>,<code>vue</code>,<code>angular</code>,<code>ember</code>都属于SPA</p><p><img src="/spa.png" alt="单页面示意图"></p><h1 id="二、SPA和MPA的区别"><a href="#二、SPA和MPA的区别" class="headerlink" title="二、SPA和MPA的区别"></a>二、SPA和MPA的区别</h1><p>多页应用MPA（MultiPage-page application），翻译过来就是多页应用在MPA中，每个页面都是一个主页面，都是独立的当我们在访问另一个页面的时候，都需要重新加载html、css、js文件。</p><p><img src="/mpa.png" alt="多页面示意图"></p><p><strong>单页应用与多页应用的区别</strong></p><table><thead><tr><th align="left">区别</th><th align="left">单页面应用（SPA）</th><th align="left">多页面应用（MPA）</th></tr></thead><tbody><tr><td align="left">组成</td><td align="left">一个主页面和多个页面片段</td><td align="left">多个主页面</td></tr><tr><td align="left">刷新方式</td><td align="left">局部刷新</td><td align="left">整页刷新</td></tr><tr><td align="left">url模式</td><td align="left">哈希模式</td><td align="left">历史模式</td></tr><tr><td align="left">SEO搜索引擎优化</td><td align="left">难实现，可使用SSR方式改善</td><td align="left">容易实现</td></tr><tr><td align="left">数据传递</td><td align="left">容易</td><td align="left">通过url、cookie、localStorage等传递</td></tr><tr><td align="left">页面切换</td><td align="left">速度快，用户体验良好</td><td align="left">切换加载资源，速度慢，用户体验差</td></tr><tr><td align="left">维护成本</td><td align="left">相对容易</td><td align="left">相对复杂</td></tr></tbody></table><hr><p><strong>单页应用优缺点</strong></p><p>优点</p><blockquote><ul><li>具有桌面应用的即时性、网站的可移植性和可访问性</li><li>用户体验好、快，内容的改变不需要重新加载整个页面</li><li>良好的前后端分离，分工更明确</li></ul></blockquote><p>缺点</p><blockquote><ul><li>不利于搜索引擎的抓取(SEO)</li><li>首次渲染速度相对较慢</li></ul></blockquote><hr><h1 id="三、实现一个SPA"><a href="#三、实现一个SPA" class="headerlink" title="三、实现一个SPA"></a>三、实现一个SPA</h1><ul><li><p>监听地址栏中hash变化驱动界面变化</p></li><li><p>用pushsate记录浏览器的历史，驱动界面发送变化</p></li></ul><p><img src="/spayuan.png" alt="SPA原理"></p><p><strong><code>hash</code>模式</strong></p><p>核心通过监听<code>url</code>中的<code>hash</code>来进行路由跳转</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义 Router  </span><span class="token keyword">class</span> <span class="token class-name">Router</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 存放路由path及callback  </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentUrl <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                    <span class="token comment">// 监听路由change调用相对应的路由回调  </span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refresh<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'hashchange'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refresh<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token function">route</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用 router  </span>window<span class="token punctuation">.</span>miniRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  miniRouter<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'page1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  miniRouter<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/page2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'page2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    miniRouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token comment">// page1  </span>miniRouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/page2'</span><span class="token punctuation">)</span> <span class="token comment">// page2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>history</code>模式</strong></p><p><code>history</code> 模式核心借用 <code>HTML5 history api</code>，<code>api</code> 提供了丰富的 <code>router</code> 相关属性先了解一个几个相关的api</p><ul><li><p>history.pushState 浏览器历史纪录添加记录</p></li><li><p>history.replaceState修改浏览器历史纪录中当前纪录</p></li><li><p>history.popState 当 history 发生变化时触发</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义 Router  </span><span class="token keyword">class</span> <span class="token class-name">Router</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listerPopState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>            <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token function">route</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>            <span class="token function">listerPopState</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span> <span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">const</span> path <span class="token operator">=</span> e<span class="token punctuation">.</span>state <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>state<span class="token punctuation">.</span>path<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>routers<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>routers<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用 Router  </span>  window<span class="token punctuation">.</span>miniRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  miniRouter<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'page1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  miniRouter<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/page2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'page2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 跳转  </span>miniRouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/page2'</span><span class="token punctuation">)</span>  <span class="token comment">// page2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML中的src和href的区别</title>
      <link href="/2019/02/13/src-href/"/>
      <url>/2019/02/13/src-href/</url>
      
        <content type="html"><![CDATA[<ul><li>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</li><li>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部</p></blockquote><ul><li>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”common.css”</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”stylesheet”/</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3新特性</title>
      <link href="/2018/12/25/css3-xin-te-xing/"/>
      <url>/2018/12/25/css3-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<ul><li><p>transition：过渡</p></li><li><p>transform: 旋转、缩放、移动或倾斜</p></li><li><p>animation: 动画</p></li><li><p>gradient: 渐变</p></li><li><p>box-shadow: 阴影</p></li><li><p>border-radius: 圆角</p></li><li><p>word-wrap：允许对长的不可分割的单词进行分割并换行到下一行。</p></li><li><p>word-break: normal|break-all|keep-all; 文字换行(默认规则|单词也可以换行|只在半角空格或连字符换行)</p></li><li><p>text-overflow: 文字超出部分处理</p></li><li><p>text-shadow: 水平阴影，垂直阴影，模糊的距离，以及阴影的颜色。</p></li><li><p>box-sizing: content-box|border-box 盒模型</p></li><li><p>媒体查询 @media screen and (max-width: 960px) {}还有打印print</p></li></ul><h3 id="CSS3背景"><a href="#CSS3背景" class="headerlink" title="CSS3背景"></a>CSS3背景</h3><ul><li><p>background-size：属性规定背景图片的尺寸。</p></li><li><p>background-origin：属性规定背景图片的定位区域。</p></li><li><p>background-clip：规定背景的绘制区域。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的概念</title>
      <link href="/2018/12/09/mian-xiang-dui-xiang/"/>
      <url>/2018/12/09/mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h4 id="面向对象是什么"><a href="#面向对象是什么" class="headerlink" title="面向对象是什么"></a>面向对象是什么</h4><p>面向对象编程可以看作是一系列对象互相协作的软件设计。</p><p>面向对象程序设计的目的是在编程中促进更好的灵活性和可维护性。凭借对模块化的重视，面向对象的代码开发更简单，更容易理解。面向对象编程的三个主要特征是1.<code>封装</code>2.<code>继承</code>3.<code>多态</code></p><p>所有的程序是由一定的属性和行为对象组成的，不同对象的访问通过函数调用来完成，对象间所有的交流都是通过方法调用，通过封装对象数据，提高复用率。</p><p>JavaScript是一种基于原型的面向对象语言，而不是基于类的。正是由这一根本的区别，其如何创建对象的层级结构以及对象的属性与属性值是如何继承的并不是那么清晰。</p><p>基于原型的语言（如JavaScript）并不存在这种区别：它只有对象。基于原型的语言具有所谓原型对象（prototypical object）的概念。原型对象可以作为一个模板，新对象可以从中获得原始的属性。任何对象都可以指定其自身的属性，即可以是创建时也可以在运行时创建。而且，任何对象都可以作为另一个对象的原型（prototype），从而允许后者共享前者的属性。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>所谓封装就是按照要求使用并得到对应的结果，而不需要知道其真正的执行原理是怎样的。封装主要用于阐述对象中所包含的内容，它通常由两部分组成</p><ul><li>相关的数据(用于存储属性)</li><li>基于这些数据所能做的事情</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承通常是指类与类之间的关系。如果两个类都有相同的属性或方法，那么可以让一个类继承于另一个类，这样就可以不需要在前者再次定义同样的属性或方法。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>不同的对象可以定义具有相同名称的方法，方法是作用于所在的对象中。这种不同对象通过相同方法的调用实现各自行为的能力，被称为多态。</p><p>例如A对象对象具有sayMe()方法，B对象继承与A对象，那B对象中也具有sayMe()方法。当调用sayMe()方法时，并不知道方法时A对象还是B对象。但这并不影响代码的正常工作。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue响应式的原理</title>
      <link href="/2018/10/14/vue-xiang-ying-shi/"/>
      <url>/2018/10/14/vue-xiang-ying-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h4><p>Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。</p><h4 id="二、响应式的基本原理"><a href="#二、响应式的基本原理" class="headerlink" title="二、响应式的基本原理"></a>二、响应式的基本原理</h4><p>  1.通过Object.defineProperty来实现监听数据的改变和读取（属性中的getter和setter方法） 实现数据劫持</p><p>  2.观察者模式（发布者-订阅者）<br>  观察者(订阅者) – Watcher：<br>  update()：当事件发生时，具体要做的事情</p><p>  目标(发布者) – Dep:<br>  ①subs 数组：存储所有的观察者<br>  ②addSub()：添加观察者<br>  ③notify()：当事件发生，调用所有观察者的 update() 方法</p><p>  3.当数据发生改变通过发布者订阅者模式来进行通知 进行界面刷新</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2018/09/07/hello-world/"/>
      <url>/2018/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<h5 id="什么是Vue"><a href="#什么是Vue" class="headerlink" title="什么是Vue"></a>什么是Vue</h5><p>Vue 是一套构建用户界面的渐进式（用到哪一块就用哪一块，不需要全部用上）前端框架，Vue 的核心库只关注视图层。</p><h4 id="Vue的两大核心"><a href="#Vue的两大核心" class="headerlink" title="Vue的两大核心"></a>Vue的两大核心</h4><blockquote><ol><li>数据驱动，也就是数据的双向绑定</li></ol><ul><li><p>Vue 响应式核心就是，getter 的时候会收集依赖，setter 的时候会触发依赖更新</p></li><li><p>vue将遍历data中对象的所有property，并使用 Object.defineProperty 把这些 property 全部转为<br> getter&#x2F;setter。</p></li><li><p>这些 getter&#x2F;setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property<br> 被访问和修改时通知变更。</p></li><li><p>每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。</p></li><li><p>getter的时候我们会收集依赖，依赖收集就是订阅数据变化watcher的收集，依赖收集的目的是当响应式数据发生变化时，能够通知相应的订阅者去处理相关的逻辑。</p></li><li><p>setter 的时候会触发依赖更新，之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p></li></ul></blockquote><blockquote><p>2.组件化系统</p><ul><li>扩展HTML元素，封装可重用的代码。每一个组件都对应一个ViewModel。页面上每个独立的可视&#x2F;可交互区域都可以视为一个组件。每个组件对应一个工程目录，组件所需要的各种资源在这个目录下就进维护。页面是组件的容器，组件可以嵌套自由组合形成完整的页面。</li></ul></blockquote><h4 id="vue-js的核心特点—MVVM模式"><a href="#vue-js的核心特点—MVVM模式" class="headerlink" title="vue.js的核心特点—MVVM模式"></a>vue.js的核心特点—MVVM模式</h4><p><code>MVVM概述</code>：M：Model数据模型 ， V：view 视图模板  ， vm：view-Model：视图模型</p><p>vue是如何实现双向数据绑定的：当数据发生改变—自动更新视图。利用Object.definedProperty中的setter&#x2F;getter代理数据，监控对数据的操作</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">pwd</span><span class="token operator">:</span> <span class="token string">'123'</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'uName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> val      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'uNmae'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> val      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span> <span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">.</span>username <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的keep-alive</title>
      <link href="/2018/08/30/keep-live/"/>
      <url>/2018/08/30/keep-live/</url>
      
        <content type="html"><![CDATA[<h3 id="1、说说你对keep-alive的理解是什么？"><a href="#1、说说你对keep-alive的理解是什么？" class="headerlink" title="1、说说你对keep-alive的理解是什么？"></a><strong>1、说说你对keep-alive的理解是什么？</strong></h3><p>​keep-alive是vue中的内置组件，能在组件切换中将状态保留在内存中，防止重复渲染DOM。keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它。</p><p>只要是设置了keep-alive缓存的组件，会多出两个生命周期钩子(activated和deactivated)</p><p>一般可以在activated缓存组件之前获取数据。</p><p>​keep-alive设置的属性</p><p>​include 字符串或表达式，只有名称匹配的组件会被缓存</p><p>​exclude 字符串或表达式，匹配到的组件不会被缓存</p><p>​max 数字  最多可以缓存的组件数量</p><p>​使用场景</p><p>​当我们在某些场景下不需要让页面重新加载时可以使用keep-alive</p><p>​代码示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a,b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 正则表达式 (使用 `v-bind`) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a|b/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 数组 (使用 `v-bind`) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>['a', 'b']<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的常用方法有哪些？</title>
      <link href="/2018/08/16/shu-zu-de-chang-yong-fang-fa/"/>
      <url>/2018/08/16/shu-zu-de-chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="一、操作方法"><a href="#一、操作方法" class="headerlink" title="一、操作方法"></a>一、操作方法</h3><p>数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会</p><p>下面对数组常用的操作方法做一个归纳</p><p><strong>增</strong></p><p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p><ul><li>push()</li><li>unshift()</li><li>splice()</li><li>concat()</li></ul><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个数组</span><span class="token keyword">let</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 推入两项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>unshift()</code>在数组开头添加任意多个值，然后返回新的数组长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个数组</span><span class="token keyword">let</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从数组开头推入两项</span><span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>splice()</code>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span> <span class="token comment">// red,yellow,orange,green,blue</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>concat()</code>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"black"</span><span class="token punctuation">,</span> <span class="token string">"brown"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red", "green","blue"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red", "green", "blue", "yellow", "black", "brown"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删</strong></p><p>下面三种都会影响原数组，最后一项不影响原数组：</p><ul><li>pop()</li><li>shift()</li><li>splice()</li><li>slice()</li></ul><p><code>pop()</code>方法用于删除数组的最后一项，同时减少数组的length 值，返回被删除的项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token keyword">let</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得最后一项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// green</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的length 值，返回被删除的项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token keyword">let</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得第一项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// red</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>splice()</code>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除第一项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green,blue</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red，只有一个元素的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>slice()</code>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"purple"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> colors3 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>   <span class="token comment">// red,green,blue,yellow,purple</span>concole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green,blue,yellow,purple</span>concole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green,blue,yellow</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>改</strong></p><p>即修改原来数组的内容，常用<code>splice</code></p><p>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入两个值，删除一个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red,red,purple,blue</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green，只有一个元素的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查</strong></p><p>即查找元素，返回元素坐标或者元素值</p><ul><li>indexOf()</li><li>includes()</li><li>find()</li><li>lastIndexOf()</li></ul><p><code>indexOf()</code>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>includes()</code>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>find()</code>返回第一个匹配的元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Matt"</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">27</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> element<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token comment">// // &#123;name: "Matt", age: 27&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lastIndexOf()</code>检测当前值在数组中最后一次出现的位置索引<br>参数：array.lastIndexOf(item,start) item:查找的元素 start:字符串中开始检索的位置</p><p>返回值：第一次查到的索引，未找到返回-1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> ary10 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary10<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary10<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、排序方法"><a href="#二、排序方法" class="headerlink" title="二、排序方法"></a>二、排序方法</h3><p>数组有两个方法可以用来对元素重新排序：</p><ul><li>reverse()</li><li>sort()</li></ul><p><code>reverse()</code>顾名思义，将数组元素方向反转</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5,4,3,2,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>sort()</code>方法接受一个比较函数，用于判断哪个值应该排在前面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">value1<span class="token punctuation">,</span> value2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0,1,5,10,15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、转换方法"><a href="#三、转换方法" class="headerlink" title="三、转换方法"></a>三、转换方法</h3><p>常见的转换方法有：<code>join()</code></p><p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red,green,blue</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"||"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red||green||blue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四、迭代方法"><a href="#四、迭代方法" class="headerlink" title="四、迭代方法"></a>四、迭代方法</h3><p>常用来迭代数组的方法（都不改变原数组）有如下：</p><ul><li>some()</li><li>every()</li><li>forEach()</li><li>filter()</li><li>map()</li></ul><p><code>some()</code>对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> someResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someResult<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>every()</code>对数组每一项都运行传入的测试函数，如果至少有1个元素返回 true ，则这个方法返回 true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> everyResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>everyResult<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>forEach()</code>对数组每一项都运行传入的函数，没有返回值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 执行某些操作</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>filter()</code>对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> filterResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filterResult<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3,4,5,4,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>map()</code>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> mapResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapResult<span class="token punctuation">)</span> <span class="token comment">// 2,4,6,8,10,8,6,4,2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML盒子模型</title>
      <link href="/2018/07/03/html1/"/>
      <url>/2018/07/03/html1/</url>
      
        <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>对一个文档进行布局的时候，游览器引擎根据标准之一的css基础框盒模型，将所有元素表示为一个个矩形的盒子，CSS盒子模型本质上就是一个盒子，封装周围的HTML元素。</p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>它包括外边距(margin)、边框(border)、内边距(padding)、实际内容(content)四个属性，分为标准模型和IE模型</p><h4 id="两种盒子模型"><a href="#两种盒子模型" class="headerlink" title="两种盒子模型"></a>两种盒子模型</h4><p>标准模型的高度和宽度只是内容的宽高度，不包含padding和margin<br>IE模型的宽高包含padding和border<br>设置盒子模型<br>标准盒子模型：box-sizing:content-box<br>IE盒子模型：box-sizing:border-box</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS优化、提高性能的方法有哪些?</title>
      <link href="/2018/06/27/you-hua-css-ti-gao-xing-neng/"/>
      <url>/2018/06/27/you-hua-css-ti-gao-xing-neng/</url>
      
        <content type="html"><![CDATA[<ul><li><p>多个<code>css</code>合并，尽量减少HTTP请求</p></li><li><p>将<code>css</code>文件放在页面最上面</p></li><li><p>移除空的<code>css</code>规则</p></li><li><p>避免使用<code>CSS</code>表达式</p></li><li><p>选择器优化嵌套，尽量避免层级过深</p></li><li><p>充分利用<code>css</code>继承属性，减少代码量</p></li><li><p>抽象提取公共样式，减少代码量</p></li><li><p>属性值为<code>0</code>时，不加单位</p></li><li><p>属性值为小于<code>1</code>的小数时，省略小数点前面的0</p></li><li><p><code>css</code>雪碧图</p></li><li><p>使用link引入css文件,可以与页面并行加载</p></li><li><p>少用*这种全局匹配 因为通配符会匹配所有</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的类型以及检测方法</title>
      <link href="/2018/06/12/js1/"/>
      <url>/2018/06/12/js1/</url>
      
        <content type="html"><![CDATA[<h4 id="1-JS内置类型"><a href="#1-JS内置类型" class="headerlink" title="1.JS内置类型"></a>1.JS内置类型</h4><p>JavaScript 数据类型如下图几种<br><img src="/js1.png" alt="类型检测"></p><blockquote><p>其中，前 7 种类型为基础类型，最后 1 种（Object）为引用类型，也是你需要重点关注的，因为它在日常工作中是使用得最频繁，也是需要关注最多技术细节的数据类型</p></blockquote><ul><li><p>JavaScript一共有8种数据类型，其中有7种基本数据类型：Undefined、Null、Boolean、Number、String、Symbol（es6新增，表示独一无二的值）和BigInt（es10新增）；</p></li><li><p>1种引用数据类型——Object（Object本质上是由一组无序的名值对组成的）。里面包含 function、Array、Date等。JavaScript不支持任何创建自定义类型的机制，而所有值最终都将是上述 8 种数据类型之一。</p><ul><li>引用数据类型: 对象Object（包含普通对象-Object，数组对象-Array，正则对象-RegExp，日期对象-Date，数学函数-Math，函数对象-Function）</li></ul></li></ul><hr><ul><li><strong>原始数据类型</strong> ：基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。</li><li><strong>引用数据类型</strong> ：引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li></ul><p><strong>其他引用类型</strong><br>除了上述说的三种之外，还包括Date、RegExp、Map、Set等…..</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对JSON的理解</title>
      <link href="/2018/05/28/json-de-li-jie/"/>
      <url>/2018/05/28/json-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是-JSON-？"><a href="#一-什么是-JSON-？" class="headerlink" title="一.什么是 JSON ？"></a>一.什么是 JSON ？</h3><ul><li><p>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</p></li><li><p>JSON 是轻量级的文本数据交换格式</p></li><li><p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p></li><li><p>JSON 具有自我描述性，更易理解</p></li></ul><h3 id="二-JSON-语法"><a href="#二-JSON-语法" class="headerlink" title="二.JSON 语法"></a>二.JSON 语法</h3><p>JSON 语法是 JavaScript 语法的子集。</p><p>JSON用键值对形式存在 e.g.{“key”:”value”}</p><h3 id="三、JSON-语法规则"><a href="#三、JSON-语法规则" class="headerlink" title="三、JSON 语法规则"></a>三、JSON 语法规则</h3><p>数据在名称&#x2F;值对中，数据由逗号分隔，大括号 { } 保存对象，中括号 [ ] 保存数组，数组可以包含多个对象，key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</p><h3 id="四、JSON-值"><a href="#四、JSON-值" class="headerlink" title="四、JSON 值"></a>四、JSON 值</h3><p>JSON 值可以是：</p><pre><code>数字（整数或浮点数）字符串（在双引号中）逻辑值（true 或 false）数组（在中括号中）对象（在大括号中）Null</code></pre><h3 id="五、JSON常用方法"><a href="#五、JSON常用方法" class="headerlink" title="五、JSON常用方法"></a>五、JSON常用方法</h3><p><code>1.JSON.parse()</code>: 将一个 JSON 字符串转换为 JavaScript 对象。<br>语法<br>JSON.parse(text[, reviver])<br>参数说明：</p><pre><code>    1.text:必需， 一个有效的 JSON 字符串。    2.reviver: 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。</code></pre><p><code>2.JSON.stringify()</code>:于将 JavaScript 值转换为 JSON 字符串。<br>语法<br>JSON.stringify(value[, replacer[, space]])</p><p>参数说明：</p><pre><code>    1.value:必需， 要转换的 JavaScript 值（通常为对象或数组）。    2.replacer:可选。用于转换结果的函数或数组。如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：&quot;&quot;。</code></pre><p>如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。</p><p><code>3.space</code>:可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\t。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>1.json是一种轻量级的数据交换格式，在与后端的数据交互中具有较为广泛的应用。</p><p>2.在javaScript中，我们可以直接使用json，因为JavaScript中内置了json的解析，把任何的JavaScript对象变成json，就是把这个对象序列化成一个json格式的字符串，这样才能通过网络传递给其他计算机。如果我们收到json格式的字符串，只需要把它反序列化为一个JavaScript对象，就可以在JavaScript中直接使用这个对象了。</p><p>3.JSON 是适用于 Ajax 应用程序的一种有效格式，原因是它使 JavaScript 对象和字符串值之间得以快速转换 JSON是一种传递对象的语法。JSON是一个提供了stringify和parse方法的内置对象。<br>stringify将js对象转化为符合json标准的字符串。<br>parse将符合json标准的字符串转化为js对象。</p>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包的理解</title>
      <link href="/2018/05/19/bibao/"/>
      <url>/2018/05/19/bibao/</url>
      
        <content type="html"><![CDATA[<h4 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h4><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</p><blockquote><p>闭包的特性：</p><ul><li>函数内再嵌套函数</li><li>内部函数可以引用外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul></blockquote><h4 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h4><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</p><p>在定时器、事件监听、Ajax请求、跨窗口通信、Web Workers 或者任何异步中，只要使用了回调函数，实际上就是在使用闭包。 以下的闭包保存的仅仅是window和当前作用域。</p><p>所以说闭包产生的本质就是，当前环境中存在指向父级作用域的引用</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用组件化开发的好处？</title>
      <link href="/2018/04/27/zujian/"/>
      <url>/2018/04/27/zujian/</url>
      
        <content type="html"><![CDATA[<ul><li><p>业务分层、解耦，使代码变得可维护</p></li><li><p>有效的拆分、可以快速定位错误组件。</p></li><li><p>便于各业务功能拆分、抽离，实现真正的功能复用；</p></li><li><p>业务隔离，跨团队开发代码控制和版本风险控制的实现；</p></li><li><p>模块化对代码的封装性、合理性都有一定的要求，提升开发开发者的设计能力；</p></li><li><p>在维护好各级组件的情况下，随意组合满足不同客户需求；（只需要将之前的多个业务组件模块在新的主App中进行组装即可快速迭代出下一个全新App）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5新增特性</title>
      <link href="/2018/04/12/html5xin/"/>
      <url>/2018/04/12/html5xin/</url>
      
        <content type="html"><![CDATA[<ul><li><p>画布(<font color='#ff00'>Canvas</font>) API</p></li><li><p>地理(<font color='#ff00'>Geolocation</font>) API</p></li><li><p>音频、视频API(<font color='#ff00'>audio,video</font>)</p></li><li><p>localStorage和sessionStorage</p></li><li><p>webworker, websocket</p></li><li><p>新的一套语义化标签 header,nav,footer,aside,article,section</p></li><li><p>web worker是运行在浏览器后台的js程序，他不影响主程序的运行，是另开的一个js线程，可以用这个线程执行复杂的数据操作，然后把操作结果通过postMessage传递给主线程，这样在进行复杂且耗时的操作时就不会阻塞主线程了。</p></li><li><p>HTML5 History两个新增的API：history.pushState 和 history.replaceState，两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新。</p></li></ul><blockquote><p>Hash就是url 中看到 # ,我们需要一个根据监听哈希变化触发的事件( hashchange) 事件。我们用 window.location处理哈希的改变时不会重新渲染页面，而是当作新页面加到历史记录中，这样我们跳转页面就可以在 hashchange 事件中注册 ajax 从而改变页面内容。 可以为hash的改变添加监听事件：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hashchange"</span><span class="token punctuation">,</span> funcRef<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>WebSocket 使用ws或wss协议，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说。WebSocket API最伟大之处在于服务器和客户端可以在给定的时间范围内的任意时刻，相互推送信息。WebSocket并不限于以Ajax(或XHR)方式通信，因为Ajax技术需要客户端发起请求，而WebSocket服务器和客户端可以彼此相互推送信息；XHR受到域的限制，而WebSocket允许跨域通信</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个Socket实例</span><span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打开Socket</span>socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 发送一个初始化消息</span>  socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'I am the client and I\'m listening!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 监听消息</span>  socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Client received a message'</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 监听Socket的关闭</span>  socket<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Client notified socket has closed'</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 关闭Socket....</span>  <span class="token comment">//socket.close()</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
